FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 0C 42 LJMP  PSoC_GPIO_ISR      (0145)     ljmp	PSoC_GPIO_ISR
001F: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 03 E6 LJMP  _SW_ISR            (0161)     ljmp	_SW_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
003C: 7D 05 1D LJMP  _stateTimer_ISR    (0177)     ljmp	_stateTimer_ISR
003F: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [0xF8],0x0         (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [0xF9],0x0         (0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 03 7B LCALL 0x037B             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 02    MOV   A,0x2              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 74    MOV   X,0x74             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 04    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 04    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 04    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 03    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 04    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 04 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 03    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 03    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 04    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 04 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 03    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
0129: 70 EF    AND   F,0xEF             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
                                        (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012B: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
012E: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0130: 62 E0 00 MOV   REG[0xE0],0x0      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0133: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0136: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
0138: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013B: 7C 09 29 LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
013E: 8F FF    JMP   0x013E             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0140: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0142: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
0276: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_stopwatch_Bank1
                                        (0019) export LoadConfigTBL_stopwatch_Bank0
                                        (0020) export LoadConfigTBL_stopwatch_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_stopwatch_Bank0:
                                        (0023) ;  Instance name LCD, User Module LCD
                                        (0024) ;  Instance name SW, User Module Timer32
                                        (0025) ;       Instance name SW, Block Name TIMER32_ISB1(DBB01)
                                        (0026) 	db		27h, 00h		;SW_CONTROL_ISB1_REG(DBB01CR0)
                                        (0027) 	db		25h, 86h		;SW_PERIOD_ISB1_REG(DBB01DR1)
                                        (0028) 	db		26h, 00h		;SW_COMPARE_ISB1_REG(DBB01DR2)
                                        (0029) ;       Instance name SW, Block Name TIMER32_ISB2(DCB02)
                                        (0030) 	db		2bh, 00h		;SW_CONTROL_ISB2_REG(DCB02CR0)
                                        (0031) 	db		29h, 01h		;SW_PERIOD_ISB2_REG(DCB02DR1)
                                        (0032) 	db		2ah, 00h		;SW_COMPARE_ISB2_REG(DCB02DR2)
                                        (0033) ;       Instance name SW, Block Name TIMER32_LSB(DBB00)
                                        (0034) 	db		23h, 00h		;SW_CONTROL_LSB_REG(DBB00CR0)
                                        (0035) 	db		21h, 9fh		;SW_PERIOD_LSB_REG(DBB00DR1)
                                        (0036) 	db		22h, 00h		;SW_COMPARE_LSB_REG(DBB00DR2)
                                        (0037) ;       Instance name SW, Block Name TIMER32_MSB(DCB03)
                                        (0038) 	db		2fh, 04h		;SW_CONTROL_MSB_REG(DCB03CR0)
                                        (0039) 	db		2dh, 00h		;SW_PERIOD_MSB_REG(DCB03DR1)
                                        (0040) 	db		2eh, 00h		;SW_COMPARE_MSB_REG(DCB03DR2)
                                        (0041) ;  Instance name stateTimer, User Module Timer32
                                        (0042) ;       Instance name stateTimer, Block Name TIMER32_ISB1(DBB11)
                                        (0043) 	db		37h, 00h		;stateTimer_CONTROL_ISB1_REG(DBB11CR0)
                                        (0044) 	db		35h, c3h		;stateTimer_PERIOD_ISB1_REG(DBB11DR1)
                                        (0045) 	db		36h, 00h		;stateTimer_COMPARE_ISB1_REG(DBB11DR2)
                                        (0046) ;       Instance name stateTimer, Block Name TIMER32_ISB2(DCB12)
                                        (0047) 	db		3bh, 00h		;stateTimer_CONTROL_ISB2_REG(DCB12CR0)
                                        (0048) 	db		39h, 00h		;stateTimer_PERIOD_ISB2_REG(DCB12DR1)
                                        (0049) 	db		3ah, 00h		;stateTimer_COMPARE_ISB2_REG(DCB12DR2)
                                        (0050) ;       Instance name stateTimer, Block Name TIMER32_LSB(DBB10)
                                        (0051) 	db		33h, 00h		;stateTimer_CONTROL_LSB_REG(DBB10CR0)
                                        (0052) 	db		31h, 4fh		;stateTimer_PERIOD_LSB_REG(DBB10DR1)
                                        (0053) 	db		32h, 00h		;stateTimer_COMPARE_LSB_REG(DBB10DR2)
                                        (0054) ;       Instance name stateTimer, Block Name TIMER32_MSB(DCB13)
                                        (0055) 	db		3fh, 04h		;stateTimer_CONTROL_MSB_REG(DCB13CR0)
                                        (0056) 	db		3dh, 00h		;stateTimer_PERIOD_MSB_REG(DCB13DR1)
                                        (0057) 	db		3eh, 00h		;stateTimer_COMPARE_MSB_REG(DCB13DR2)
                                        (0058) ;  Global Register values Bank 0
                                        (0059) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0060) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0061) 	db		63h, 15h		; AnalogReferenceControl register (ARF_CR)
                                        (0062) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0063) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0064) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0065) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0066) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0067) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0068) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0069) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0070) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0071) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0072) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0073) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0074) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0075) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0076) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0077) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0078) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0079) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0080) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0081) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0082) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0083) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0084) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0085) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0086) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0087) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0088) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0089) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0090) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0091) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0092) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0093) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0094) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0095) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0096) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0097) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0098) 	db		ffh
                                        (0099) LoadConfigTBL_stopwatch_Bank1:
                                        (0100) ;  Instance name LCD, User Module LCD
                                        (0101) ;  Instance name SW, User Module Timer32
                                        (0102) ;       Instance name SW, Block Name TIMER32_ISB1(DBB01)
                                        (0103) 	db		24h, 00h		;SW_FUNC_ISB1_REG(DBB01FN)
                                        (0104) 	db		25h, 36h		;SW_INPUT_ISB1_REG(DBB01IN)
                                        (0105) 	db		26h, 00h		;SW_OUTPUT_ISB1_REG(DBB01OU)
                                        (0106) ;       Instance name SW, Block Name TIMER32_ISB2(DCB02)
                                        (0107) 	db		28h, 00h		;SW_FUNC_ISB2_REG(DCB02FN)
                                        (0108) 	db		29h, 36h		;SW_INPUT_ISB2_REG(DCB02IN)
                                        (0109) 	db		2ah, 00h		;SW_OUTPUT_ISB2_REG(DCB02OU)
                                        (0110) ;       Instance name SW, Block Name TIMER32_LSB(DBB00)
                                        (0111) 	db		20h, 00h		;SW_FUNC_LSB_REG(DBB00FN)
                                        (0112) 	db		21h, 16h		;SW_INPUT_LSB_REG(DBB00IN)
                                        (0113) 	db		22h, 00h		;SW_OUTPUT_LSB_REG(DBB00OU)
                                        (0114) ;       Instance name SW, Block Name TIMER32_MSB(DCB03)
                                        (0115) 	db		2ch, 20h		;SW_FUNC_MSB_REG(DCB03FN)
                                        (0116) 	db		2dh, 36h		;SW_INPUT_MSB_REG(DCB03IN)
                                        (0117) 	db		2eh, 00h		;SW_OUTPUT_MSB_REG(DCB03OU)
                                        (0118) ;  Instance name stateTimer, User Module Timer32
                                        (0119) ;       Instance name stateTimer, Block Name TIMER32_ISB1(DBB11)
                                        (0120) 	db		34h, 00h		;stateTimer_FUNC_ISB1_REG(DBB11FN)
                                        (0121) 	db		35h, 36h		;stateTimer_INPUT_ISB1_REG(DBB11IN)
                                        (0122) 	db		36h, 00h		;stateTimer_OUTPUT_ISB1_REG(DBB11OU)
                                        (0123) ;       Instance name stateTimer, Block Name TIMER32_ISB2(DCB12)
                                        (0124) 	db		38h, 00h		;stateTimer_FUNC_ISB2_REG(DCB12FN)
                                        (0125) 	db		39h, 36h		;stateTimer_INPUT_ISB2_REG(DCB12IN)
                                        (0126) 	db		3ah, 00h		;stateTimer_OUTPUT_ISB2_REG(DCB12OU)
                                        (0127) ;       Instance name stateTimer, Block Name TIMER32_LSB(DBB10)
                                        (0128) 	db		30h, 00h		;stateTimer_FUNC_LSB_REG(DBB10FN)
                                        (0129) 	db		31h, 16h		;stateTimer_INPUT_LSB_REG(DBB10IN)
                                        (0130) 	db		32h, 00h		;stateTimer_OUTPUT_LSB_REG(DBB10OU)
                                        (0131) ;       Instance name stateTimer, Block Name TIMER32_MSB(DCB13)
                                        (0132) 	db		3ch, 20h		;stateTimer_FUNC_MSB_REG(DCB13FN)
                                        (0133) 	db		3dh, 36h		;stateTimer_INPUT_MSB_REG(DCB13IN)
                                        (0134) 	db		3eh, 00h		;stateTimer_OUTPUT_MSB_REG(DCB13OU)
                                        (0135) ;  Global Register values Bank 1
                                        (0136) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0137) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0138) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0139) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0140) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0141) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0142) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0143) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0144) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0145) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0146) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0147) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0148) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0149) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0150) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0151) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0152) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0153) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0154) 	db		ffh
                                        (0155) AREA psoc_config(rom, rel)
                                        (0156) LoadConfigTBL_stopwatch_Ordered:
                                        (0157) ;  Ordered Global Register values
                                        (0158) 	M8C_SetBank0
0278: 62 00 00 MOV   REG[0x0],0x0       (0159) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
027B: 71 10    OR    F,0x10             
                                        (0160) 	M8C_SetBank1
027D: 62 00 00 MOV   REG[0x0],0x0       (0161) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
0280: 62 01 FF MOV   REG[0x1],0xFF      (0162) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
0283: 70 EF    AND   F,0xEF             
                                        (0163) 	M8C_SetBank0
0285: 62 03 FF MOV   REG[0x3],0xFF      (0164) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
0288: 62 02 00 MOV   REG[0x2],0x0       (0165) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
028B: 71 10    OR    F,0x10             
                                        (0166) 	M8C_SetBank1
028D: 62 02 00 MOV   REG[0x2],0x0       (0167) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0290: 62 03 00 MOV   REG[0x3],0x0       (0168) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0293: 70 EF    AND   F,0xEF             
                                        (0169) 	M8C_SetBank0
0295: 62 01 00 MOV   REG[0x1],0x0       (0170) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0298: 62 04 00 MOV   REG[0x4],0x0       (0171) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
029B: 71 10    OR    F,0x10             
                                        (0172) 	M8C_SetBank1
029D: 62 04 00 MOV   REG[0x4],0x0       (0173) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
02A0: 62 05 FE MOV   REG[0x5],0xFE      (0174) 	mov	reg[05h], feh		; Port_1_DriveMode_1 register (PRT1DM1)
02A3: 70 EF    AND   F,0xEF             
                                        (0175) 	M8C_SetBank0
02A5: 62 07 FE MOV   REG[0x7],0xFE      (0176) 	mov	reg[07h], feh		; Port_1_DriveMode_2 register (PRT1DM2)
02A8: 62 06 00 MOV   REG[0x6],0x0       (0177) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
02AB: 71 10    OR    F,0x10             
                                        (0178) 	M8C_SetBank1
02AD: 62 06 00 MOV   REG[0x6],0x0       (0179) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
02B0: 62 07 01 MOV   REG[0x7],0x1       (0180) 	mov	reg[07h], 01h		; Port_1_IntCtrl_1 register (PRT1IC1)
02B3: 70 EF    AND   F,0xEF             
                                        (0181) 	M8C_SetBank0
02B5: 62 05 01 MOV   REG[0x5],0x1       (0182) 	mov	reg[05h], 01h		; Port_1_IntEn register (PRT1IE)
02B8: 62 08 00 MOV   REG[0x8],0x0       (0183) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
02BB: 71 10    OR    F,0x10             
                                        (0184) 	M8C_SetBank1
02BD: 62 08 7F MOV   REG[0x8],0x7F      (0185) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
02C0: 62 09 80 MOV   REG[0x9],0x80      (0186) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
02C3: 70 EF    AND   F,0xEF             
                                        (0187) 	M8C_SetBank0
02C5: 62 0B 80 MOV   REG[0xB],0x80      (0188) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
02C8: 62 0A 00 MOV   REG[0xA],0x0       (0189) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
02CB: 71 10    OR    F,0x10             
                                        (0190) 	M8C_SetBank1
02CD: 62 0A 00 MOV   REG[0xA],0x0       (0191) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
02D0: 62 0B 00 MOV   REG[0xB],0x0       (0192) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
02D3: 70 EF    AND   F,0xEF             
                                        (0193) 	M8C_SetBank0
02D5: 62 09 00 MOV   REG[0x9],0x0       (0194) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
02D8: 62 0C 00 MOV   REG[0xC],0x0       (0195) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
02DB: 71 10    OR    F,0x10             
                                        (0196) 	M8C_SetBank1
02DD: 62 0C 00 MOV   REG[0xC],0x0       (0197) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
02E0: 62 0D 00 MOV   REG[0xD],0x0       (0198) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
02E3: 70 EF    AND   F,0xEF             
                                        (0199) 	M8C_SetBank0
02E5: 62 0F 00 MOV   REG[0xF],0x0       (0200) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
02E8: 62 0E 00 MOV   REG[0xE],0x0       (0201) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
02EB: 71 10    OR    F,0x10             
                                        (0202) 	M8C_SetBank1
02ED: 62 0E 00 MOV   REG[0xE],0x0       (0203) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
02F0: 62 0F 00 MOV   REG[0xF],0x0       (0204) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
02F3: 70 EF    AND   F,0xEF             
                                        (0205) 	M8C_SetBank0
02F5: 62 0D 00 MOV   REG[0xD],0x0       (0206) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
02F8: 62 10 00 MOV   REG[0x10],0x0      (0207) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
02FB: 71 10    OR    F,0x10             
                                        (0208) 	M8C_SetBank1
02FD: 62 10 00 MOV   REG[0x10],0x0      (0209) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0300: 62 11 00 MOV   REG[0x11],0x0      (0210) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0303: 70 EF    AND   F,0xEF             
                                        (0211) 	M8C_SetBank0
0305: 62 13 00 MOV   REG[0x13],0x0      (0212) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0308: 62 12 00 MOV   REG[0x12],0x0      (0213) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
030B: 71 10    OR    F,0x10             
                                        (0214) 	M8C_SetBank1
030D: 62 12 00 MOV   REG[0x12],0x0      (0215) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0310: 62 13 00 MOV   REG[0x13],0x0      (0216) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0313: 70 EF    AND   F,0xEF             
                                        (0217) 	M8C_SetBank0
0315: 62 11 00 MOV   REG[0x11],0x0      (0218) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0318: 62 14 00 MOV   REG[0x14],0x0      (0219) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
031B: 71 10    OR    F,0x10             
                                        (0220) 	M8C_SetBank1
031D: 62 14 00 MOV   REG[0x14],0x0      (0221) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0320: 62 15 00 MOV   REG[0x15],0x0      (0222) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0323: 70 EF    AND   F,0xEF             
                                        (0223) 	M8C_SetBank0
0325: 62 17 00 MOV   REG[0x17],0x0      (0224) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0328: 62 16 00 MOV   REG[0x16],0x0      (0225) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
032B: 71 10    OR    F,0x10             
                                        (0226) 	M8C_SetBank1
032D: 62 16 00 MOV   REG[0x16],0x0      (0227) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0330: 62 17 00 MOV   REG[0x17],0x0      (0228) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0333: 70 EF    AND   F,0xEF             
                                        (0229) 	M8C_SetBank0
0335: 62 15 00 MOV   REG[0x15],0x0      (0230) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0338: 62 18 00 MOV   REG[0x18],0x0      (0231) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
033B: 71 10    OR    F,0x10             
                                        (0232) 	M8C_SetBank1
033D: 62 18 00 MOV   REG[0x18],0x0      (0233) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
0340: 62 19 00 MOV   REG[0x19],0x0      (0234) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
0343: 70 EF    AND   F,0xEF             
                                        (0235) 	M8C_SetBank0
0345: 62 1B 00 MOV   REG[0x1B],0x0      (0236) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
0348: 62 1A 00 MOV   REG[0x1A],0x0      (0237) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
034B: 71 10    OR    F,0x10             
                                        (0238) 	M8C_SetBank1
034D: 62 1A 00 MOV   REG[0x1A],0x0      (0239) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0350: 62 1B 00 MOV   REG[0x1B],0x0      (0240) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
0353: 70 EF    AND   F,0xEF             
                                        (0241) 	M8C_SetBank0
0355: 62 19 00 MOV   REG[0x19],0x0      (0242) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0358: 62 1C 00 MOV   REG[0x1C],0x0      (0243) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
035B: 71 10    OR    F,0x10             
                                        (0244) 	M8C_SetBank1
035D: 62 1C 00 MOV   REG[0x1C],0x0      (0245) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0360: 62 1D 00 MOV   REG[0x1D],0x0      (0246) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0363: 70 EF    AND   F,0xEF             
                                        (0247) 	M8C_SetBank0
0365: 62 1F 00 MOV   REG[0x1F],0x0      (0248) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0368: 62 1E 00 MOV   REG[0x1E],0x0      (0249) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
036B: 71 10    OR    F,0x10             
                                        (0250) 	M8C_SetBank1
036D: 62 1E 00 MOV   REG[0x1E],0x0      (0251) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0370: 62 1F 00 MOV   REG[0x1F],0x0      (0252) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
0373: 70 EF    AND   F,0xEF             
                                        (0253) 	M8C_SetBank0
0375: 62 1D 00 MOV   REG[0x1D],0x0      (0254) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0378: 70 EF    AND   F,0xEF             
                                        (0255) 	M8C_SetBank0
037A: 7F       RET                      (0256) 	ret
                                        (0257) 
                                        (0258) 
                                        (0259) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_stopwatch
                                        (0026) export _LoadConfig_stopwatch
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
037B: 55 00 00 MOV   [0x0],0x0          (0065) 	mov		[Port_2_Data_SHADE], 0h
037E: 55 01 7F MOV   [0x1],0x7F         (0066) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
0381: 55 02 80 MOV   [0x2],0x80         (0067) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0068) 
0384: 7C 03 8B LCALL 0x038B             (0069) 	lcall	LoadConfig_stopwatch
0387: 7C 02 76 LCALL 0x0276             (0070) 	lcall	LoadConfigTBL_stopwatch_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
038A: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration stopwatch
                                        (0078) ;
                                        (0079) ;    Load configuration registers for stopwatch.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_stopwatch:
                                        (0096)  LoadConfig_stopwatch:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
038B: 10       PUSH  X                  (0099) 	push	x
038C: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
038E: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
0390: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
0391: 50 01    MOV   A,0x1              (0104)     mov     A, >LoadConfigTBL_stopwatch_Bank0
0393: 57 A0    MOV   X,0xA0             (0105)     mov     X, <LoadConfigTBL_stopwatch_Bank0
0395: 7C 03 A6 LCALL 0x03A6             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
0398: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
039A: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
039B: 50 02    MOV   A,0x2              (0111)     mov     A, >LoadConfigTBL_stopwatch_Bank1
039D: 57 1F    MOV   X,0x1F             (0112)     mov     X, <LoadConfigTBL_stopwatch_Bank1
039F: 7C 03 A6 LCALL 0x03A6             (0113)     lcall   LoadConfig              ; Load the bank 1 values
03A2: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
03A4: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
03A5: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
03A6: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
03A8: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
03A9: 08       PUSH  A                  (0143)     push    A
03AA: 4F       MOV   X,SP               (0144)     mov     X, SP
03AB: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
03AE: D0 04    JNC   0x03B3             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
03B0: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
03B3: 18       POP   A                  (0149)     pop     A
03B4: 20       POP   X                  (0150)     pop     X
03B5: 70 EF    AND   F,0xEF             
03B7: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
03BA: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
03BB: 08       PUSH  A                  (0156)     push    A
03BC: 28       ROMX                     (0157)     romx                            ; Load register address from table
03BD: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
03BF: A0 1F    JZ    0x03DF             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
03C1: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
03C2: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
03C5: A0 03    JZ    0x03C9             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
03C7: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
03C9: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
03CB: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
03CC: 20       POP   X                  (0167)     pop     X
03CD: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
03CE: 09 00    ADC   A,0x0              (0169)     adc     A, 0
03D0: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
03D1: 08       PUSH  A                  (0171)     push    A
03D2: 28       ROMX                     (0172)     romx                            ; load config data from the table
03D3: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
03D4: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
03D6: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
03D8: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
03D9: 20       POP   X                  (0177)     pop     X
03DA: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
03DB: 09 00    ADC   A,0x0              (0179)     adc     A, 0
03DD: 8F D7    JMP   0x03B5             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
03DF: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
03E1: 70 3F    AND   F,0x3F             
03E3: 71 C0    OR    F,0xC0             
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
03E5: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\swint.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SWINT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer32 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "SW.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _SW_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) milisec: equ 0x10
                                        (0040) seconds: equ 0x11
                                        (0041) minutes: equ 0x12
                                        (0042) hour: equ 0x13
                                        (0043) accuracyItr: equ 0x21
                                        (0044) 
                                        (0045) ;------------------------
                                        (0046) ; Variable Allocation
                                        (0047) ;------------------------
                                        (0048) 
                                        (0049) 
                                        (0050) ;---------------------------------------------------
                                        (0051) ; Insert your custom declarations above this banner
                                        (0052) ;---------------------------------------------------
                                        (0053) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0054) 
                                        (0055) 
                                        (0056) AREA UserModules (ROM, REL)
                                        (0057) 
                                        (0058) ;-----------------------------------------------------------------------------
                                        (0059) ;  FUNCTION NAME: _SW_ISR
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0062) ;
                                        (0063) ;-----------------------------------------------------------------------------
                                        (0064) ;
                                        (0065) 
                                        (0066) _SW_ISR:
                                        (0067) 
                                        (0068)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0069)    ;---------------------------------------------------
                                        (0070)    ; Insert your custom assembly code below this banner
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ;   NOTE: interrupt service routines must preserve
                                        (0073)    ;   the values of the A and X CPU registers.
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert your custom assembly code above this banner
                                        (0077)    ;---------------------------------------------------
03E6: 51 21    MOV   A,[0x21]           (0078)    	mov A , [accuracyItr]
03E8: 39 00    CMP   A,0x0              (0079) 	cmp A , 0x00
03EA: A0 14    JZ    0x03FF             (0080) 	jz _count_sec
03EC: 39 05    CMP   A,0x5              (0081) 	cmp A, 0x05
03EE: A0 05    JZ    0x03F4             (0082) 	jz _millifive
03F0: 76 10    INC   [0x10]             (0083) 	inc [milisec]
03F2: 80 04    JMP   0x03F7             (0084) 	jmp _compareCornerMilis
                                        (0085) _millifive:
03F4: 06 10 05 ADD   [0x10],0x5         (0086) 	add [milisec],0x05
                                        (0087) _compareCornerMilis:
03F7: 3C 10 0A CMP   [0x10],0xA         (0088) 	cmp [milisec], 0x0A
03FA: C0 1A    JC    0x0415             (0089) 	jc end_timeLoop ; jump if seconds < 60
03FC: 55 10 00 MOV   [0x10],0x0         (0090) 	mov [milisec], 0x00
                                        (0091) _count_sec:	
03FF: 76 11    INC   [0x11]             (0092) 	inc [seconds]
0401: 3C 11 3C CMP   [0x11],0x3C        (0093) 	cmp [seconds], 0x3c
0404: C0 10    JC    0x0415             (0094) 	jc end_timeLoop ; jump if seconds < 60
0406: 55 11 00 MOV   [0x11],0x0         (0095) 	mov [seconds], 0x00
0409: 76 12    INC   [0x12]             (0096) 	inc [minutes]
040B: 3C 12 3C CMP   [0x12],0x3C        (0097) 	cmp [minutes], 0x3c
040E: C0 06    JC    0x0415             (0098) 	jc end_timeLoop ; jump if minutes < 60
0410: 55 12 00 MOV   [0x12],0x0         (0099) 	mov [minutes], 0x00
0413: 76 13    INC   [0x13]             (0100) 	inc [hour]
                                        (0101) end_timeLoop:
0415: 50 00    MOV   A,0x0              (0102) 	mov    A,00
0417: 57 00    MOV   X,0x0              (0103) 	mov    X,00
0419: 93 6A    CALL  _LCD_Position      (0104)    	call   LCD_Position
041B: 51 13    MOV   A,[0x13]           (0105)    	mov    A,[hour]
041D: 92 03    CALL  _LCD_PrHexByte     (0106)    	call   LCD_PrHexByte   
                                        (0107) 	
041F: 50 00    MOV   A,0x0              (0108) 	mov    A,00
0421: 57 02    MOV   X,0x2              (0109) 	mov    X,02
0423: 93 60    CALL  _LCD_Position      (0110)    	call   LCD_Position
0425: 50 04    MOV   A,0x4              (0111) 	mov    A,>COLON
0427: 57 61    MOV   X,0x61             (0112)    	mov    X,<COLON
0429: 91 D5    CALL  _LCD_PrCString     (0113)    	call   LCD_PrCString
                                        (0114) 	
042B: 50 00    MOV   A,0x0              (0115) 	mov    A,00
042D: 57 03    MOV   X,0x3              (0116) 	mov    X,03
042F: 93 54    CALL  _LCD_Position      (0117)    	call   LCD_Position
0431: 51 12    MOV   A,[0x12]           (0118)    	mov    A,[minutes]
0433: 91 ED    CALL  _LCD_PrHexByte     (0119)    	call   LCD_PrHexByte   
                                        (0120) 	
0435: 50 00    MOV   A,0x0              (0121) 	mov    A,00
0437: 57 05    MOV   X,0x5              (0122) 	mov    X,05
0439: 93 4A    CALL  _LCD_Position      (0123)    	call   LCD_Position
043B: 50 04    MOV   A,0x4              (0124) 	mov    A,>COLON
043D: 57 61    MOV   X,0x61             (0125)    	mov    X,<COLON
043F: 91 BF    CALL  _LCD_PrCString     (0126)    	call   LCD_PrCString   
                                        (0127) 	
0441: 50 00    MOV   A,0x0              (0128) 	mov    A,00
0443: 57 06    MOV   X,0x6              (0129) 	mov    X,06
0445: 93 3E    CALL  _LCD_Position      (0130)    	call   LCD_Position
0447: 51 11    MOV   A,[0x11]           (0131)    	mov    A,[seconds]
0449: 91 D7    CALL  _LCD_PrHexByte     (0132)    	call   LCD_PrHexByte   
                                        (0133) 	
044B: 50 00    MOV   A,0x0              (0134) 	mov    A,00
044D: 57 0A    MOV   X,0xA              (0135) 	mov    X,10
044F: 93 34    CALL  _LCD_Position      (0136)    	call   LCD_Position
0451: 50 04    MOV   A,0x4              (0137) 	mov    A,>COLON
0453: 57 61    MOV   X,0x61             (0138)    	mov    X,<COLON
0455: 91 A9    CALL  _LCD_PrCString     (0139)    	call   LCD_PrCString   
                                        (0140) 	
0457: 50 00    MOV   A,0x0              (0141) 	mov    A,00
0459: 57 0B    MOV   X,0xB              (0142) 	mov    X,11
045B: 93 28    CALL  _LCD_Position      (0143)    	call   LCD_Position
045D: 51 10    MOV   A,[0x10]           (0144) 	mov    A,[milisec]
045F: 91 C1    CALL  _LCD_PrHexByte     (0145)    	call   LCD_PrHexByte    
                                        (0146) 	
                                        (0147) .LITERAL
                                        (0148) 	COLON:
                                        (0149) 		ds  ":"
                                        (0150) 		db  00h
                                        (0151) .ENDLITERAL
                                        (0152)    ;---------------------------------------------------
                                        (0153)    ; Insert a lcall to a C function below this banner
                                        (0154)    ; and un-comment the lines between these banners
                                        (0155)    ;---------------------------------------------------
                                        (0156)    
                                        (0157)    ;PRESERVE_CPU_CONTEXT
                                        (0158)    ;lcall _My_C_Function
                                        (0159)    ;RESTORE_CPU_CONTEXT
                                        (0160)    
                                        (0161)    ;---------------------------------------------------
                                        (0162)    ; Insert a lcall to a C function above this banner
                                        (0163)    ; and un-comment the lines between these banners
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0166) 
0463: 7E       RETI                     (0167)    reti
                                        (0168) 
                                        (0169) 
                                        (0170) ; end of file SWINT.asm
FILE: lib\sw.asm                        (0001) ;;*****************************************************************************
0464: 43 E1 08 OR    REG[0xE1],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SW.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer32 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "SW.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  SW_EnableInt
                                        (0030) export _SW_EnableInt
                                        (0031) export  SW_DisableInt
                                        (0032) export _SW_DisableInt
                                        (0033) export  SW_Start
                                        (0034) export _SW_Start
                                        (0035) export  SW_Stop
                                        (0036) export _SW_Stop
                                        (0037) export  SW_WritePeriod
                                        (0038) export _SW_WritePeriod
                                        (0039) export  SW_WriteCompareValue
                                        (0040) export _SW_WriteCompareValue
                                        (0041) export  SW_ReadCompareValue
                                        (0042) export _SW_ReadCompareValue
                                        (0043) export  SW_ReadTimer
                                        (0044) export _SW_ReadTimer
                                        (0045) export  SW_ReadTimerSaveCV
                                        (0046) export _SW_ReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  SW_ReadCounter       ; obsolete
                                        (0051) export _SW_ReadCounter       ; obsolete
                                        (0052) export  SW_CaptureCounter    ; obsolete
                                        (0053) export _SW_CaptureCounter    ; obsolete
                                        (0054) 
                                        (0055) 
                                        (0056) AREA stopwatch_RAM (RAM,REL)
                                        (0057) 
                                        (0058) ;-----------------------------------------------
                                        (0059) ;  Constant Definitions
                                        (0060) ;-----------------------------------------------
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: SW_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  SW_EnableInt:
                                        (0091) _SW_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    SW_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0467: 7F       RET                      (0095)    ret
0468: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0096) 
                                        (0097) .ENDSECTION
                                        (0098) 
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: SW_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS: 
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  SW_DisableInt:
                                        (0119) _SW_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    SW_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
046B: 7F       RET                      (0123)    ret
046C: 43 23 01 OR    REG[0x23],0x1      
                                        (0124) 
                                        (0125) .ENDSECTION
                                        (0126) 
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: SW_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     timer will begin counting on the next input clock.
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;
                                        (0137) ;  ARGUMENTS:    None
                                        (0138) ;  RETURNS:      Nothing
                                        (0139) ;  SIDE EFFECTS: 
                                        (0140) ;    The A and X registers may be modified by this or future implementations
                                        (0141) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0142) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0143) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0144) ;    functions.
                                        (0145) ;
                                        (0146)  SW_Start:
                                        (0147) _SW_Start:
                                        (0148)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0149)    SW_Start_M
                                        (0150)    RAM_EPILOGUE RAM_USE_CLASS_1
046F: 7F       RET                      (0151)    ret
0470: 41 23 FE AND   REG[0x23],0xFE     
                                        (0152) 
                                        (0153) .ENDSECTION
                                        (0154) 
                                        (0155) 
                                        (0156) .SECTION
                                        (0157) ;-----------------------------------------------------------------------------
                                        (0158) ;  FUNCTION NAME: SW_Stop
                                        (0159) ;
                                        (0160) ;  DESCRIPTION:
                                        (0161) ;     Disables timer operation by clearing the start bit in the Control
                                        (0162) ;     register of the LSB block.
                                        (0163) ;-----------------------------------------------------------------------------
                                        (0164) ;
                                        (0165) ;  ARGUMENTS:    None
                                        (0166) ;  RETURNS:      Nothing
                                        (0167) ;  SIDE EFFECTS: 
                                        (0168) ;    The A and X registers may be modified by this or future implementations
                                        (0169) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0170) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0171) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0172) ;    functions.
                                        (0173) ;
                                        (0174)  SW_Stop:
                                        (0175) _SW_Stop:
                                        (0176)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0177)    SW_Stop_M
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_1
0473: 7F       RET                      (0179)    ret
                                        (0180) 
                                        (0181) .ENDSECTION
                                        (0182) 
                                        (0183) 
                                        (0184) .SECTION
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;  FUNCTION NAME: SW_WritePeriod
                                        (0187) ;
                                        (0188) ;  DESCRIPTION:
                                        (0189) ;     Write the 32-bit period value into the Period register (DR1). If the
                                        (0190) ;     Timer user module is stopped, then this value will also be latched
                                        (0191) ;     into the Count register (DR0).
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;
                                        (0194) ;  ARGUMENTS: fastcall16 DWORD dwPeriodValue (on stack)
                                        (0195) ;  RETURNS:   Nothing
                                        (0196) ;  SIDE EFFECTS:
                                        (0197) ;    If the timer user module is stopped, then this value will also be
                                        (0198) ;    latched into the Count registers (DR0).
                                        (0199) ;    
                                        (0200) ;    The A and X registers may be modified by this or future implementations
                                        (0201) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0202) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0203) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0204) ;    functions.
                                        (0205) ;
                                        (0206) _SW_WritePeriod:
                                        (0207)  SW_WritePeriod:
                                        (0208)    RAM_PROLOGUE RAM_USE_CLASS_2
0474: 4F       MOV   X,SP               (0209)    mov   X, SP
0475: 52 FA    MOV   A,[X-6]            (0210)    mov   A, [X-6]                                ; load the period registers
0477: 60 2D    MOV   REG[0x2D],A        (0211)    mov   reg[SW_PERIOD_MSB_REG],  A
0479: 52 FB    MOV   A,[X-5]            (0212)    mov   A, [X-5]
047B: 60 29    MOV   REG[0x29],A        (0213)    mov   reg[SW_PERIOD_ISB2_REG], A
047D: 52 FC    MOV   A,[X-4]            (0214)    mov   A, [X-4]
047F: 60 25    MOV   REG[0x25],A        (0215)    mov   reg[SW_PERIOD_ISB1_REG], A
0481: 52 FD    MOV   A,[X-3]            (0216)    mov   A, [X-3]
0483: 60 21    MOV   REG[0x21],A        (0217)    mov   reg[SW_PERIOD_LSB_REG],  A
0485: 70 3F    AND   F,0x3F             
0487: 71 C0    OR    F,0xC0             
                                        (0218)    RAM_EPILOGUE RAM_USE_CLASS_2
0489: 7F       RET                      (0219)    ret
                                        (0220) 
                                        (0221) .ENDSECTION
                                        (0222) 
                                        (0223) 
                                        (0224) .SECTION
                                        (0225) ;-----------------------------------------------------------------------------
                                        (0226) ;  FUNCTION NAME: SW_WriteCompareValue
                                        (0227) ;
                                        (0228) ;  DESCRIPTION:
                                        (0229) ;     Writes compare value into the Compare register (DR2).
                                        (0230) ;
                                        (0231) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0232) ;           Compare register. (Call SW_Stop to disable).
                                        (0233) ;-----------------------------------------------------------------------------
                                        (0234) ;
                                        (0235) ;  ARGUMENTS:    fastcall16 DWORD dwCompareValue (on stack)
                                        (0236) ;  RETURNS:      Nothing
                                        (0237) ;  SIDE EFFECTS: 
                                        (0238) ;    The A and X registers may be modified by this or future implementations
                                        (0239) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0240) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0241) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0242) ;    functions.
                                        (0243) ;
                                        (0244) _SW_WriteCompareValue:
                                        (0245)  SW_WriteCompareValue:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_2
048A: 4F       MOV   X,SP               (0247)    mov   X, SP
048B: 52 FA    MOV   A,[X-6]            (0248)    mov   A, [X-6]                                ; load the compare registers
048D: 60 2E    MOV   REG[0x2E],A        (0249)    mov   reg[SW_COMPARE_MSB_REG],  A
048F: 52 FB    MOV   A,[X-5]            (0250)    mov   A, [X-5]
0491: 60 2A    MOV   REG[0x2A],A        (0251)    mov   reg[SW_COMPARE_ISB2_REG], A
0493: 52 FC    MOV   A,[X-4]            (0252)    mov   A, [X-4]
0495: 60 26    MOV   REG[0x26],A        (0253)    mov   reg[SW_COMPARE_ISB1_REG], A
0497: 52 FD    MOV   A,[X-3]            (0254)    mov   A, [X-3]
0499: 60 22    MOV   REG[0x22],A        (0255)    mov   reg[SW_COMPARE_LSB_REG],  A
049B: 70 3F    AND   F,0x3F             
049D: 71 C0    OR    F,0xC0             
                                        (0256)    RAM_EPILOGUE RAM_USE_CLASS_2
049F: 7F       RET                      (0257)    ret
04A0: 70 BF    AND   F,0xBF             
04A2: 60 D3    MOV   REG[0xD3],A        
                                        (0258) 
                                        (0259) .ENDSECTION
                                        (0260) 
                                        (0261) 
                                        (0262) .SECTION
                                        (0263) ;-----------------------------------------------------------------------------
                                        (0264) ;  FUNCTION NAME: SW_ReadCompareValue
                                        (0265) ;
                                        (0266) ;  DESCRIPTION:
                                        (0267) ;     Reads the Compare registers.
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;
                                        (0270) ;  ARGUMENTS: fastcall16 DWORD * pdwCompareValue
                                        (0271) ;             (pointer: LSB in X, MSB in A, for pass-by-reference update)
                                        (0272) ;  RETURNS:   Nothing (but see Side Effects).
                                        (0273) ;  SIDE EFFECTS:
                                        (0274) ;     1. The DWORD pointed to by X takes on the value read from DR2
                                        (0275) ;     2. The A and X registers may be modified by this or future implementations
                                        (0276) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0277) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0278) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0279) ;        functions.
                                        (0280) ;              
                                        (0281) ;        Currently only the page pointer registers listed below are modified: 
                                        (0282) ;              IDX_PP
                                        (0283) 
                                        (0284) ;
                                        (0285)  SW_ReadCompareValue:
                                        (0286) _SW_ReadCompareValue:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0288)    RAM_SETPAGE_IDX A 
04A4: 5D 2E    MOV   A,REG[0x2E]        (0289)    mov   A, reg[SW_COMPARE_MSB_REG]
04A6: 54 00    MOV   [X+0],A            (0290)    mov   [X+0], A
04A8: 5D 2A    MOV   A,REG[0x2A]        (0291)    mov   A, reg[SW_COMPARE_ISB2_REG]
04AA: 54 01    MOV   [X+1],A            (0292)    mov   [X+1], A
04AC: 5D 26    MOV   A,REG[0x26]        (0293)    mov   A, reg[SW_COMPARE_ISB1_REG]
04AE: 54 02    MOV   [X+2],A            (0294)    mov   [X+2], A
04B0: 5D 22    MOV   A,REG[0x22]        (0295)    mov   A, reg[SW_COMPARE_LSB_REG]
04B2: 54 03    MOV   [X+3],A            (0296)    mov   [X+3], A
04B4: 70 3F    AND   F,0x3F             
04B6: 71 C0    OR    F,0xC0             
                                        (0297)    RAM_EPILOGUE RAM_USE_CLASS_3
04B8: 7F       RET                      (0298)    ret
04B9: 70 BF    AND   F,0xBF             
04BB: 60 D3    MOV   REG[0xD3],A        
                                        (0299) 
                                        (0300) .ENDSECTION
                                        (0301) 
                                        (0302) 
                                        (0303) .SECTION
                                        (0304) ;-----------------------------------------------------------------------------
                                        (0305) ;  FUNCTION NAME: SW_ReadTimerSaveCV
                                        (0306) ;
                                        (0307) ;  DESCRIPTION:
                                        (0308) ;     Retrieves the value in the Count register (DR0), preserving the
                                        (0309) ;     value in the compare register (DR2).
                                        (0310) ;-----------------------------------------------------------------------------
                                        (0311) ;
                                        (0312) ;  ARGUMENTS: fastcall16 DWORD * pdwCount
                                        (0313) ;             (pointer: LSB in X, MSB in A, for pass-by-reference update)
                                        (0314) ;  RETURNS:   Nothing (but see Side Effects).
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;     1) The DWORD pointed to by X takes on the value read from DR0
                                        (0317) ;     2) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0318) ;     3) If enabled, Global interrupts are momentarily disabled.
                                        (0319) ;     4) The user module is stopped momentarily while the compare value is
                                        (0320) ;        restored.  This may cause the Count register to miss one or more
                                        (0321) ;        counts depending on the input clock speed.
                                        (0322) ;     5) The A and X registers may be modified by this or future implementations
                                        (0323) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0324) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0325) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0326) ;        functions.
                                        (0327) ;              
                                        (0328) ;        Currently only the page pointer registers listed below are modified: 
                                        (0329) ;              IDX_PP
                                        (0330) ;
                                        (0331) ;  THEORY of OPERATION:
                                        (0332) ;     1) Read and save the Compare register.
                                        (0333) ;     2) Read the Count register, causing its data to be latched into
                                        (0334) ;        the Compare register.
                                        (0335) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0336) ;        to the buffer.
                                        (0337) ;     4) Disable global interrupts
                                        (0338) ;     5) Halt the timer
                                        (0339) ;     6) Restore the Compare register values
                                        (0340) ;     7) Start the Timer again
                                        (0341) ;     8) Restore global interrupt state
                                        (0342) ;
                                        (0343)  SW_ReadTimerSaveCV:
                                        (0344) _SW_ReadTimerSaveCV:
                                        (0345)  SW_ReadCounter:                                 ; this name deprecated
                                        (0346) _SW_ReadCounter:                                 ; this name deprecated
                                        (0347) 
                                        (0348)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0349)    RAM_SETPAGE_IDX A 
                                        (0350) 
                                        (0351)    ; save the Control register on the stack
04BD: 5D 23    MOV   A,REG[0x23]        (0352)    mov   A, reg[SW_CONTROL_LSB_REG]
04BF: 08       PUSH  A                  (0353)    push  A
                                        (0354) 
                                        (0355)    ; save the Compare register value
04C0: 5D 2E    MOV   A,REG[0x2E]        (0356)    mov   A, reg[SW_COMPARE_MSB_REG]
04C2: 08       PUSH  A                  (0357)    push  A
04C3: 5D 2A    MOV   A,REG[0x2A]        (0358)    mov   A, reg[SW_COMPARE_ISB2_REG]
04C5: 08       PUSH  A                  (0359)    push  A
04C6: 5D 26    MOV   A,REG[0x26]        (0360)    mov   A, reg[SW_COMPARE_ISB1_REG]
04C8: 08       PUSH  A                  (0361)    push  A
04C9: 5D 22    MOV   A,REG[0x22]        (0362)    mov   A, reg[SW_COMPARE_LSB_REG]
04CB: 08       PUSH  A                  (0363)    push  A
                                        (0364) 
                                        (0365)    ; Read the LSB count. This latches the Count register data into the
                                        (0366)    ; Compare register of all bytes of chained PSoC blocks!
                                        (0367)    ; This may cause an interrupt.
04CC: 5D 20    MOV   A,REG[0x20]        (0368)    mov   A, reg[SW_COUNTER_LSB_REG]
                                        (0369) 
                                        (0370)    ; Read the Compare register, which contains the counter value
                                        (0371)    ; and store the return result
04CE: 5D 2E    MOV   A,REG[0x2E]        (0372)    mov   A, reg[SW_COMPARE_MSB_REG]
04D0: 54 00    MOV   [X+0],A            (0373)    mov   [X+0], A
04D2: 5D 2A    MOV   A,REG[0x2A]        (0374)    mov   A, reg[SW_COMPARE_ISB2_REG]
04D4: 54 01    MOV   [X+1],A            (0375)    mov   [X+1], A
04D6: 5D 26    MOV   A,REG[0x26]        (0376)    mov   A, reg[SW_COMPARE_ISB1_REG]
04D8: 54 02    MOV   [X+2],A            (0377)    mov   [X+2], A
04DA: 5D 22    MOV   A,REG[0x22]        (0378)    mov   A, reg[SW_COMPARE_LSB_REG]
04DC: 54 03    MOV   [X+3],A            (0379)    mov   [X+3], A
                                        (0380) 
                                        (0381)    ; determine current interrupt state and save in X
04DE: 50 00    MOV   A,0x0              (0382)    mov   A, 0
04E0: 49 F7 01 TST   REG[0xF7],0x1      (0383)    tst   reg[CPU_F], FLAG_GLOBAL_IE
04E3: A0 03    JZ    0x04E7             (0384)    jz    .SetupStatusFlag
04E5: 50 01    MOV   A,0x1              (0385)    mov   A, FLAG_GLOBAL_IE
                                        (0386) .SetupStatusFlag:
04E7: 5C       MOV   X,A                (0387)    mov   X, A
04E8: 70 FE    AND   F,0xFE             
04EA: 41 23 FE AND   REG[0x23],0xFE     
                                        (0388) 
                                        (0389)    ; disable interrupts for the time being
                                        (0390)    M8C_DisableGInt
                                        (0391) 
                                        (0392)    ; stop the timer
                                        (0393)    SW_Stop_M
                                        (0394) 
                                        (0395)    ; Restore the Compare register
04ED: 18       POP   A                  (0396)    pop   A
04EE: 60 22    MOV   REG[0x22],A        (0397)    mov   reg[SW_COMPARE_LSB_REG],  A
04F0: 18       POP   A                  (0398)    pop   A
04F1: 60 26    MOV   REG[0x26],A        (0399)    mov   reg[SW_COMPARE_ISB1_REG], A
04F3: 18       POP   A                  (0400)    pop   A
04F4: 60 2A    MOV   REG[0x2A],A        (0401)    mov   reg[SW_COMPARE_ISB2_REG], A
04F6: 18       POP   A                  (0402)    pop   A
04F7: 60 2E    MOV   REG[0x2E],A        (0403)    mov   reg[SW_COMPARE_MSB_REG],  A
                                        (0404) 
                                        (0405)    ; restore start state of the timer
04F9: 18       POP   A                  (0406)    pop   A
04FA: 60 23    MOV   REG[0x23],A        (0407)    mov   reg[SW_CONTROL_LSB_REG], A
                                        (0408) 
                                        (0409)    ; push the flag register to restore on the stack
04FC: 10       PUSH  X                  (0410)    push  X
04FD: 70 3F    AND   F,0x3F             
04FF: 71 C0    OR    F,0xC0             
                                        (0411) 
                                        (0412)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0413)    ; Use RETI because it pops a the flag register off the stack
                                        (0414)    ; and then returns to the caller.
0501: 7E       RETI                     (0415)    reti
0502: 70 BF    AND   F,0xBF             
0504: 60 D3    MOV   REG[0xD3],A        
                                        (0416) 
                                        (0417) .ENDSECTION
                                        (0418) 
                                        (0419) 
                                        (0420) .SECTION
                                        (0421) ;-----------------------------------------------------------------------------
                                        (0422) ;  FUNCTION NAME: SW_ReadTimer
                                        (0423) ;
                                        (0424) ;  DESCRIPTION:
                                        (0425) ;     Performs a software capture of the Count register.  A synchronous
                                        (0426) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0427) ;
                                        (0428) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;
                                        (0431) ;  ARGUMENTS: fastcall16 DWORD * pdwCount
                                        (0432) ;             (pointer: LSB in X, MSB in A, for pass-by-reference update)
                                        (0433) ;  RETURNS:   Nothing (but see Side Effects).
                                        (0434) ;  SIDE EFFECTS:
                                        (0435) ;     1) The DWORD pointed to by X takes on the value read from DR2.
                                        (0436) ;     2) May cause an interrupt.
                                        (0437) ;     3) The A and X registers may be modified by this or future implementations
                                        (0438) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0439) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0440) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0441) ;        functions.
                                        (0442) ;              
                                        (0443) ;        Currently only the page pointer registers listed below are modified: 
                                        (0444) ;              IDX_PP
                                        (0445) ;
                                        (0446) ;  THEORY of OPERATION:
                                        (0447) ;     1) Read the Count register - this causes the count value to be
                                        (0448) ;        latched into the Compare registers.
                                        (0449) ;     2) Read and return the Count register values from the Compare
                                        (0450) ;        registers into the return buffer.
                                        (0451) ;
                                        (0452)  SW_ReadTimer:
                                        (0453) _SW_ReadTimer:
                                        (0454)  SW_CaptureCounter:                              ; this name deprecated
                                        (0455) _SW_CaptureCounter:                              ; this name deprecated
                                        (0456) 
                                        (0457)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0458)    RAM_SETPAGE_IDX A 
                                        (0459) 
                                        (0460)    ; Read the LSB of the Count register, DR0. This latches the count data into
                                        (0461)    ; the Compare register of all bytes of chained PSoC blocks and may cause
                                        (0462)    ; an interrupt.
0506: 5D 20    MOV   A,REG[0x20]        (0463)    mov   A, reg[SW_COUNTER_LSB_REG]
                                        (0464) 
                                        (0465)    ; Read the Compare register, which contains the counter value
                                        (0466)    ; and store ther return result
0508: 5D 2E    MOV   A,REG[0x2E]        (0467)    mov   A, reg[SW_COMPARE_MSB_REG]
050A: 54 00    MOV   [X+0],A            (0468)    mov   [X+0], A
050C: 5D 2A    MOV   A,REG[0x2A]        (0469)    mov   A, reg[SW_COMPARE_ISB2_REG]
050E: 54 01    MOV   [X+1],A            (0470)    mov   [X+1], A
0510: 5D 26    MOV   A,REG[0x26]        (0471)    mov   A, reg[SW_COMPARE_ISB1_REG]
0512: 54 02    MOV   [X+2],A            (0472)    mov   [X+2], A
0514: 5D 22    MOV   A,REG[0x22]        (0473)    mov   A, reg[SW_COMPARE_LSB_REG]
0516: 54 03    MOV   [X+3],A            (0474)    mov   [X+3], A
0518: 70 3F    AND   F,0x3F             
051A: 71 C0    OR    F,0xC0             
                                        (0475)    RAM_EPILOGUE RAM_USE_CLASS_3
051C: 7F       RET                      (0476)    ret
                                        (0477) 
                                        (0478) .ENDSECTION
                                        (0479) 
                                        (0480) ; End of File SW.asm
FILE: lib\statetimerint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: stateTimerINT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer32 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "stateTimer.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _stateTimer_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) stateTimerMilisec: equ 0x22
                                        (0040) stateTimerSeconds: equ 0x23
                                        (0041) stateTimerMinutes: equ 0x24
                                        (0042) stateTimerHour: equ 0x25
                                        (0043) stateTimerAccuracy: equ 0x26
                                        (0044) 
                                        (0045) ;------------------------
                                        (0046) ; Variable Allocation
                                        (0047) ;------------------------
                                        (0048) 
                                        (0049) 
                                        (0050) ;---------------------------------------------------
                                        (0051) ; Insert your custom declarations above this banner
                                        (0052) ;---------------------------------------------------
                                        (0053) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0054) 
                                        (0055) 
                                        (0056) AREA UserModules (ROM, REL)
                                        (0057) 
                                        (0058) ;-----------------------------------------------------------------------------
                                        (0059) ;  FUNCTION NAME: _stateTimer_ISR
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0062) ;
                                        (0063) ;-----------------------------------------------------------------------------
                                        (0064) ;
                                        (0065) 
                                        (0066) _stateTimer_ISR:
                                        (0067) 
                                        (0068)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0069)    ;---------------------------------------------------
                                        (0070)    ; Insert your custom assembly code below this banner
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ;   NOTE: interrupt service routines must preserve
                                        (0073)    ;   the values of the A and X CPU registers.
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert your custom assembly code above this banner
                                        (0077)    ;---------------------------------------------------
051D: 51 22    MOV   A,[0x22]           (0078)    	mov A , [stateTimerMilisec]
051F: 02 26    ADD   A,[0x26]           (0079) 	add A , [stateTimerAccuracy]
0521: 53 22    MOV   [0x22],A           (0080) 	mov [stateTimerMilisec] , A
0523: 3C 22 0A CMP   [0x22],0xA         (0081) 	cmp [stateTimerMilisec], 0x0A
0526: C0 1F    JC    0x0546             (0082) 	jc end_timeLoop ; jump if seconds < 60
0528: 55 22 00 MOV   [0x22],0x0         (0083) 	mov [stateTimerMilisec], 0x00
052B: 76 23    INC   [0x23]             (0084) 	inc [stateTimerSeconds]
052D: 3C 23 3C CMP   [0x23],0x3C        (0085) 	cmp [stateTimerSeconds], 0x3c
0530: C0 15    JC    0x0546             (0086) 	jc end_timeLoop ; jump if seconds < 60
0532: 55 23 00 MOV   [0x23],0x0         (0087) 	mov [stateTimerSeconds], 0x00
0535: 76 24    INC   [0x24]             (0088) 	inc [stateTimerMinutes]
0537: 3C 24 3C CMP   [0x24],0x3C        (0089) 	cmp [stateTimerMinutes], 0x3c
053A: C0 0B    JC    0x0546             (0090) 	jc end_timeLoop ; jump if minutes < 60
053C: 55 24 00 MOV   [0x24],0x0         (0091) 	mov [stateTimerMinutes], 0x00
053F: 76 25    INC   [0x25]             (0092) 	inc [stateTimerHour]
0541: 3C 25 18 CMP   [0x25],0x18        (0093) 	cmp [stateTimerHour], 0x18
0544: C0 01    JC    0x0546             (0094) 	jc end_timeLoop ; jump if hour < 24
                                        (0095) end_timeLoop:
                                        (0096)    ;---------------------------------------------------
                                        (0097)    ; Insert a lcall to a C function below this banner
                                        (0098)    ; and un-comment the lines between these banners
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;PRESERVE_CPU_CONTEXT
                                        (0102)    ;lcall _My_C_Function
                                        (0103)    ;RESTORE_CPU_CONTEXT
                                        (0104)    
                                        (0105)    ;---------------------------------------------------
                                        (0106)    ; Insert a lcall to a C function above this banner
                                        (0107)    ; and un-comment the lines between these banners
                                        (0108)    ;---------------------------------------------------
                                        (0109)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0110) 
0546: 7E       RETI                     (0111)    reti
                                        (0112) 
                                        (0113) 
                                        (0114) ; end of file stateTimerINT.asm
FILE: lib\statetimer.asm                (0001) ;;*****************************************************************************
0547: 43 E1 80 OR    REG[0xE1],0x80     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: stateTimer.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer32 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "stateTimer.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  stateTimer_EnableInt
                                        (0030) export _stateTimer_EnableInt
                                        (0031) export  stateTimer_DisableInt
                                        (0032) export _stateTimer_DisableInt
                                        (0033) export  stateTimer_Start
                                        (0034) export _stateTimer_Start
                                        (0035) export  stateTimer_Stop
                                        (0036) export _stateTimer_Stop
                                        (0037) export  stateTimer_WritePeriod
                                        (0038) export _stateTimer_WritePeriod
                                        (0039) export  stateTimer_WriteCompareValue
                                        (0040) export _stateTimer_WriteCompareValue
                                        (0041) export  stateTimer_ReadCompareValue
                                        (0042) export _stateTimer_ReadCompareValue
                                        (0043) export  stateTimer_ReadTimer
                                        (0044) export _stateTimer_ReadTimer
                                        (0045) export  stateTimer_ReadTimerSaveCV
                                        (0046) export _stateTimer_ReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  stateTimer_ReadCounter       ; obsolete
                                        (0051) export _stateTimer_ReadCounter       ; obsolete
                                        (0052) export  stateTimer_CaptureCounter    ; obsolete
                                        (0053) export _stateTimer_CaptureCounter    ; obsolete
                                        (0054) 
                                        (0055) 
                                        (0056) AREA stopwatch_RAM (RAM,REL)
                                        (0057) 
                                        (0058) ;-----------------------------------------------
                                        (0059) ;  Constant Definitions
                                        (0060) ;-----------------------------------------------
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: stateTimer_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  stateTimer_EnableInt:
                                        (0091) _stateTimer_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    stateTimer_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
054A: 7F       RET                      (0095)    ret
054B: 41 E1 7F AND   REG[0xE1],0x7F     
                                        (0096) 
                                        (0097) .ENDSECTION
                                        (0098) 
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: stateTimer_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS: 
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  stateTimer_DisableInt:
                                        (0119) _stateTimer_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    stateTimer_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
054E: 7F       RET                      (0123)    ret
054F: 43 33 01 OR    REG[0x33],0x1      
                                        (0124) 
                                        (0125) .ENDSECTION
                                        (0126) 
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: stateTimer_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     timer will begin counting on the next input clock.
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;
                                        (0137) ;  ARGUMENTS:    None
                                        (0138) ;  RETURNS:      Nothing
                                        (0139) ;  SIDE EFFECTS: 
                                        (0140) ;    The A and X registers may be modified by this or future implementations
                                        (0141) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0142) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0143) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0144) ;    functions.
                                        (0145) ;
                                        (0146)  stateTimer_Start:
                                        (0147) _stateTimer_Start:
                                        (0148)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0149)    stateTimer_Start_M
                                        (0150)    RAM_EPILOGUE RAM_USE_CLASS_1
0552: 7F       RET                      (0151)    ret
0553: 41 33 FE AND   REG[0x33],0xFE     
                                        (0152) 
                                        (0153) .ENDSECTION
                                        (0154) 
                                        (0155) 
                                        (0156) .SECTION
                                        (0157) ;-----------------------------------------------------------------------------
                                        (0158) ;  FUNCTION NAME: stateTimer_Stop
                                        (0159) ;
                                        (0160) ;  DESCRIPTION:
                                        (0161) ;     Disables timer operation by clearing the start bit in the Control
                                        (0162) ;     register of the LSB block.
                                        (0163) ;-----------------------------------------------------------------------------
                                        (0164) ;
                                        (0165) ;  ARGUMENTS:    None
                                        (0166) ;  RETURNS:      Nothing
                                        (0167) ;  SIDE EFFECTS: 
                                        (0168) ;    The A and X registers may be modified by this or future implementations
                                        (0169) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0170) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0171) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0172) ;    functions.
                                        (0173) ;
                                        (0174)  stateTimer_Stop:
                                        (0175) _stateTimer_Stop:
                                        (0176)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0177)    stateTimer_Stop_M
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_1
0556: 7F       RET                      (0179)    ret
                                        (0180) 
                                        (0181) .ENDSECTION
                                        (0182) 
                                        (0183) 
                                        (0184) .SECTION
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;  FUNCTION NAME: stateTimer_WritePeriod
                                        (0187) ;
                                        (0188) ;  DESCRIPTION:
                                        (0189) ;     Write the 32-bit period value into the Period register (DR1). If the
                                        (0190) ;     Timer user module is stopped, then this value will also be latched
                                        (0191) ;     into the Count register (DR0).
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;
                                        (0194) ;  ARGUMENTS: fastcall16 DWORD dwPeriodValue (on stack)
                                        (0195) ;  RETURNS:   Nothing
                                        (0196) ;  SIDE EFFECTS:
                                        (0197) ;    If the timer user module is stopped, then this value will also be
                                        (0198) ;    latched into the Count registers (DR0).
                                        (0199) ;    
                                        (0200) ;    The A and X registers may be modified by this or future implementations
                                        (0201) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0202) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0203) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0204) ;    functions.
                                        (0205) ;
                                        (0206) _stateTimer_WritePeriod:
                                        (0207)  stateTimer_WritePeriod:
                                        (0208)    RAM_PROLOGUE RAM_USE_CLASS_2
0557: 4F       MOV   X,SP               (0209)    mov   X, SP
0558: 52 FA    MOV   A,[X-6]            (0210)    mov   A, [X-6]                                ; load the period registers
055A: 60 3D    MOV   REG[0x3D],A        (0211)    mov   reg[stateTimer_PERIOD_MSB_REG],  A
055C: 52 FB    MOV   A,[X-5]            (0212)    mov   A, [X-5]
055E: 60 39    MOV   REG[0x39],A        (0213)    mov   reg[stateTimer_PERIOD_ISB2_REG], A
0560: 52 FC    MOV   A,[X-4]            (0214)    mov   A, [X-4]
0562: 60 35    MOV   REG[0x35],A        (0215)    mov   reg[stateTimer_PERIOD_ISB1_REG], A
0564: 52 FD    MOV   A,[X-3]            (0216)    mov   A, [X-3]
0566: 60 31    MOV   REG[0x31],A        (0217)    mov   reg[stateTimer_PERIOD_LSB_REG],  A
0568: 70 3F    AND   F,0x3F             
056A: 71 C0    OR    F,0xC0             
                                        (0218)    RAM_EPILOGUE RAM_USE_CLASS_2
056C: 7F       RET                      (0219)    ret
                                        (0220) 
                                        (0221) .ENDSECTION
                                        (0222) 
                                        (0223) 
                                        (0224) .SECTION
                                        (0225) ;-----------------------------------------------------------------------------
                                        (0226) ;  FUNCTION NAME: stateTimer_WriteCompareValue
                                        (0227) ;
                                        (0228) ;  DESCRIPTION:
                                        (0229) ;     Writes compare value into the Compare register (DR2).
                                        (0230) ;
                                        (0231) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0232) ;           Compare register. (Call stateTimer_Stop to disable).
                                        (0233) ;-----------------------------------------------------------------------------
                                        (0234) ;
                                        (0235) ;  ARGUMENTS:    fastcall16 DWORD dwCompareValue (on stack)
                                        (0236) ;  RETURNS:      Nothing
                                        (0237) ;  SIDE EFFECTS: 
                                        (0238) ;    The A and X registers may be modified by this or future implementations
                                        (0239) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0240) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0241) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0242) ;    functions.
                                        (0243) ;
                                        (0244) _stateTimer_WriteCompareValue:
                                        (0245)  stateTimer_WriteCompareValue:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_2
056D: 4F       MOV   X,SP               (0247)    mov   X, SP
056E: 52 FA    MOV   A,[X-6]            (0248)    mov   A, [X-6]                                ; load the compare registers
0570: 60 3E    MOV   REG[0x3E],A        (0249)    mov   reg[stateTimer_COMPARE_MSB_REG],  A
0572: 52 FB    MOV   A,[X-5]            (0250)    mov   A, [X-5]
0574: 60 3A    MOV   REG[0x3A],A        (0251)    mov   reg[stateTimer_COMPARE_ISB2_REG], A
0576: 52 FC    MOV   A,[X-4]            (0252)    mov   A, [X-4]
0578: 60 36    MOV   REG[0x36],A        (0253)    mov   reg[stateTimer_COMPARE_ISB1_REG], A
057A: 52 FD    MOV   A,[X-3]            (0254)    mov   A, [X-3]
057C: 60 32    MOV   REG[0x32],A        (0255)    mov   reg[stateTimer_COMPARE_LSB_REG],  A
057E: 70 3F    AND   F,0x3F             
0580: 71 C0    OR    F,0xC0             
                                        (0256)    RAM_EPILOGUE RAM_USE_CLASS_2
0582: 7F       RET                      (0257)    ret
0583: 70 BF    AND   F,0xBF             
0585: 60 D3    MOV   REG[0xD3],A        
                                        (0258) 
                                        (0259) .ENDSECTION
                                        (0260) 
                                        (0261) 
                                        (0262) .SECTION
                                        (0263) ;-----------------------------------------------------------------------------
                                        (0264) ;  FUNCTION NAME: stateTimer_ReadCompareValue
                                        (0265) ;
                                        (0266) ;  DESCRIPTION:
                                        (0267) ;     Reads the Compare registers.
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;
                                        (0270) ;  ARGUMENTS: fastcall16 DWORD * pdwCompareValue
                                        (0271) ;             (pointer: LSB in X, MSB in A, for pass-by-reference update)
                                        (0272) ;  RETURNS:   Nothing (but see Side Effects).
                                        (0273) ;  SIDE EFFECTS:
                                        (0274) ;     1. The DWORD pointed to by X takes on the value read from DR2
                                        (0275) ;     2. The A and X registers may be modified by this or future implementations
                                        (0276) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0277) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0278) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0279) ;        functions.
                                        (0280) ;              
                                        (0281) ;        Currently only the page pointer registers listed below are modified: 
                                        (0282) ;              IDX_PP
                                        (0283) 
                                        (0284) ;
                                        (0285)  stateTimer_ReadCompareValue:
                                        (0286) _stateTimer_ReadCompareValue:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0288)    RAM_SETPAGE_IDX A 
0587: 5D 3E    MOV   A,REG[0x3E]        (0289)    mov   A, reg[stateTimer_COMPARE_MSB_REG]
0589: 54 00    MOV   [X+0],A            (0290)    mov   [X+0], A
058B: 5D 3A    MOV   A,REG[0x3A]        (0291)    mov   A, reg[stateTimer_COMPARE_ISB2_REG]
058D: 54 01    MOV   [X+1],A            (0292)    mov   [X+1], A
058F: 5D 36    MOV   A,REG[0x36]        (0293)    mov   A, reg[stateTimer_COMPARE_ISB1_REG]
0591: 54 02    MOV   [X+2],A            (0294)    mov   [X+2], A
0593: 5D 32    MOV   A,REG[0x32]        (0295)    mov   A, reg[stateTimer_COMPARE_LSB_REG]
0595: 54 03    MOV   [X+3],A            (0296)    mov   [X+3], A
0597: 70 3F    AND   F,0x3F             
0599: 71 C0    OR    F,0xC0             
                                        (0297)    RAM_EPILOGUE RAM_USE_CLASS_3
059B: 7F       RET                      (0298)    ret
059C: 70 BF    AND   F,0xBF             
059E: 60 D3    MOV   REG[0xD3],A        
                                        (0299) 
                                        (0300) .ENDSECTION
                                        (0301) 
                                        (0302) 
                                        (0303) .SECTION
                                        (0304) ;-----------------------------------------------------------------------------
                                        (0305) ;  FUNCTION NAME: stateTimer_ReadTimerSaveCV
                                        (0306) ;
                                        (0307) ;  DESCRIPTION:
                                        (0308) ;     Retrieves the value in the Count register (DR0), preserving the
                                        (0309) ;     value in the compare register (DR2).
                                        (0310) ;-----------------------------------------------------------------------------
                                        (0311) ;
                                        (0312) ;  ARGUMENTS: fastcall16 DWORD * pdwCount
                                        (0313) ;             (pointer: LSB in X, MSB in A, for pass-by-reference update)
                                        (0314) ;  RETURNS:   Nothing (but see Side Effects).
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;     1) The DWORD pointed to by X takes on the value read from DR0
                                        (0317) ;     2) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0318) ;     3) If enabled, Global interrupts are momentarily disabled.
                                        (0319) ;     4) The user module is stopped momentarily while the compare value is
                                        (0320) ;        restored.  This may cause the Count register to miss one or more
                                        (0321) ;        counts depending on the input clock speed.
                                        (0322) ;     5) The A and X registers may be modified by this or future implementations
                                        (0323) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0324) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0325) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0326) ;        functions.
                                        (0327) ;              
                                        (0328) ;        Currently only the page pointer registers listed below are modified: 
                                        (0329) ;              IDX_PP
                                        (0330) ;
                                        (0331) ;  THEORY of OPERATION:
                                        (0332) ;     1) Read and save the Compare register.
                                        (0333) ;     2) Read the Count register, causing its data to be latched into
                                        (0334) ;        the Compare register.
                                        (0335) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0336) ;        to the buffer.
                                        (0337) ;     4) Disable global interrupts
                                        (0338) ;     5) Halt the timer
                                        (0339) ;     6) Restore the Compare register values
                                        (0340) ;     7) Start the Timer again
                                        (0341) ;     8) Restore global interrupt state
                                        (0342) ;
                                        (0343)  stateTimer_ReadTimerSaveCV:
                                        (0344) _stateTimer_ReadTimerSaveCV:
                                        (0345)  stateTimer_ReadCounter:                         ; this name deprecated
                                        (0346) _stateTimer_ReadCounter:                         ; this name deprecated
                                        (0347) 
                                        (0348)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0349)    RAM_SETPAGE_IDX A 
                                        (0350) 
                                        (0351)    ; save the Control register on the stack
05A0: 5D 33    MOV   A,REG[0x33]        (0352)    mov   A, reg[stateTimer_CONTROL_LSB_REG]
05A2: 08       PUSH  A                  (0353)    push  A
                                        (0354) 
                                        (0355)    ; save the Compare register value
05A3: 5D 3E    MOV   A,REG[0x3E]        (0356)    mov   A, reg[stateTimer_COMPARE_MSB_REG]
05A5: 08       PUSH  A                  (0357)    push  A
05A6: 5D 3A    MOV   A,REG[0x3A]        (0358)    mov   A, reg[stateTimer_COMPARE_ISB2_REG]
05A8: 08       PUSH  A                  (0359)    push  A
05A9: 5D 36    MOV   A,REG[0x36]        (0360)    mov   A, reg[stateTimer_COMPARE_ISB1_REG]
05AB: 08       PUSH  A                  (0361)    push  A
05AC: 5D 32    MOV   A,REG[0x32]        (0362)    mov   A, reg[stateTimer_COMPARE_LSB_REG]
05AE: 08       PUSH  A                  (0363)    push  A
                                        (0364) 
                                        (0365)    ; Read the LSB count. This latches the Count register data into the
                                        (0366)    ; Compare register of all bytes of chained PSoC blocks!
                                        (0367)    ; This may cause an interrupt.
05AF: 5D 30    MOV   A,REG[0x30]        (0368)    mov   A, reg[stateTimer_COUNTER_LSB_REG]
                                        (0369) 
                                        (0370)    ; Read the Compare register, which contains the counter value
                                        (0371)    ; and store the return result
05B1: 5D 3E    MOV   A,REG[0x3E]        (0372)    mov   A, reg[stateTimer_COMPARE_MSB_REG]
05B3: 54 00    MOV   [X+0],A            (0373)    mov   [X+0], A
05B5: 5D 3A    MOV   A,REG[0x3A]        (0374)    mov   A, reg[stateTimer_COMPARE_ISB2_REG]
05B7: 54 01    MOV   [X+1],A            (0375)    mov   [X+1], A
05B9: 5D 36    MOV   A,REG[0x36]        (0376)    mov   A, reg[stateTimer_COMPARE_ISB1_REG]
05BB: 54 02    MOV   [X+2],A            (0377)    mov   [X+2], A
05BD: 5D 32    MOV   A,REG[0x32]        (0378)    mov   A, reg[stateTimer_COMPARE_LSB_REG]
05BF: 54 03    MOV   [X+3],A            (0379)    mov   [X+3], A
                                        (0380) 
                                        (0381)    ; determine current interrupt state and save in X
05C1: 50 00    MOV   A,0x0              (0382)    mov   A, 0
05C3: 49 F7 01 TST   REG[0xF7],0x1      (0383)    tst   reg[CPU_F], FLAG_GLOBAL_IE
05C6: A0 03    JZ    0x05CA             (0384)    jz    .SetupStatusFlag
05C8: 50 01    MOV   A,0x1              (0385)    mov   A, FLAG_GLOBAL_IE
                                        (0386) .SetupStatusFlag:
05CA: 5C       MOV   X,A                (0387)    mov   X, A
05CB: 70 FE    AND   F,0xFE             
05CD: 41 33 FE AND   REG[0x33],0xFE     
                                        (0388) 
                                        (0389)    ; disable interrupts for the time being
                                        (0390)    M8C_DisableGInt
                                        (0391) 
                                        (0392)    ; stop the timer
                                        (0393)    stateTimer_Stop_M
                                        (0394) 
                                        (0395)    ; Restore the Compare register
05D0: 18       POP   A                  (0396)    pop   A
05D1: 60 32    MOV   REG[0x32],A        (0397)    mov   reg[stateTimer_COMPARE_LSB_REG],  A
05D3: 18       POP   A                  (0398)    pop   A
05D4: 60 36    MOV   REG[0x36],A        (0399)    mov   reg[stateTimer_COMPARE_ISB1_REG], A
05D6: 18       POP   A                  (0400)    pop   A
05D7: 60 3A    MOV   REG[0x3A],A        (0401)    mov   reg[stateTimer_COMPARE_ISB2_REG], A
05D9: 18       POP   A                  (0402)    pop   A
05DA: 60 3E    MOV   REG[0x3E],A        (0403)    mov   reg[stateTimer_COMPARE_MSB_REG],  A
                                        (0404) 
                                        (0405)    ; restore start state of the timer
05DC: 18       POP   A                  (0406)    pop   A
05DD: 60 33    MOV   REG[0x33],A        (0407)    mov   reg[stateTimer_CONTROL_LSB_REG], A
                                        (0408) 
                                        (0409)    ; push the flag register to restore on the stack
05DF: 10       PUSH  X                  (0410)    push  X
05E0: 70 3F    AND   F,0x3F             
05E2: 71 C0    OR    F,0xC0             
                                        (0411) 
                                        (0412)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0413)    ; Use RETI because it pops a the flag register off the stack
                                        (0414)    ; and then returns to the caller.
05E4: 7E       RETI                     (0415)    reti
05E5: 70 BF    AND   F,0xBF             
05E7: 60 D3    MOV   REG[0xD3],A        
                                        (0416) 
                                        (0417) .ENDSECTION
                                        (0418) 
                                        (0419) 
                                        (0420) .SECTION
                                        (0421) ;-----------------------------------------------------------------------------
                                        (0422) ;  FUNCTION NAME: stateTimer_ReadTimer
                                        (0423) ;
                                        (0424) ;  DESCRIPTION:
                                        (0425) ;     Performs a software capture of the Count register.  A synchronous
                                        (0426) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0427) ;
                                        (0428) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;
                                        (0431) ;  ARGUMENTS: fastcall16 DWORD * pdwCount
                                        (0432) ;             (pointer: LSB in X, MSB in A, for pass-by-reference update)
                                        (0433) ;  RETURNS:   Nothing (but see Side Effects).
                                        (0434) ;  SIDE EFFECTS:
                                        (0435) ;     1) The DWORD pointed to by X takes on the value read from DR2.
                                        (0436) ;     2) May cause an interrupt.
                                        (0437) ;     3) The A and X registers may be modified by this or future implementations
                                        (0438) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0439) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0440) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0441) ;        functions.
                                        (0442) ;              
                                        (0443) ;        Currently only the page pointer registers listed below are modified: 
                                        (0444) ;              IDX_PP
                                        (0445) ;
                                        (0446) ;  THEORY of OPERATION:
                                        (0447) ;     1) Read the Count register - this causes the count value to be
                                        (0448) ;        latched into the Compare registers.
                                        (0449) ;     2) Read and return the Count register values from the Compare
                                        (0450) ;        registers into the return buffer.
                                        (0451) ;
                                        (0452)  stateTimer_ReadTimer:
                                        (0453) _stateTimer_ReadTimer:
                                        (0454)  stateTimer_CaptureCounter:                      ; this name deprecated
                                        (0455) _stateTimer_CaptureCounter:                      ; this name deprecated
                                        (0456) 
                                        (0457)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0458)    RAM_SETPAGE_IDX A 
                                        (0459) 
                                        (0460)    ; Read the LSB of the Count register, DR0. This latches the count data into
                                        (0461)    ; the Compare register of all bytes of chained PSoC blocks and may cause
                                        (0462)    ; an interrupt.
05E9: 5D 30    MOV   A,REG[0x30]        (0463)    mov   A, reg[stateTimer_COUNTER_LSB_REG]
                                        (0464) 
                                        (0465)    ; Read the Compare register, which contains the counter value
                                        (0466)    ; and store ther return result
05EB: 5D 3E    MOV   A,REG[0x3E]        (0467)    mov   A, reg[stateTimer_COMPARE_MSB_REG]
05ED: 54 00    MOV   [X+0],A            (0468)    mov   [X+0], A
05EF: 5D 3A    MOV   A,REG[0x3A]        (0469)    mov   A, reg[stateTimer_COMPARE_ISB2_REG]
05F1: 54 01    MOV   [X+1],A            (0470)    mov   [X+1], A
05F3: 5D 36    MOV   A,REG[0x36]        (0471)    mov   A, reg[stateTimer_COMPARE_ISB1_REG]
05F5: 54 02    MOV   [X+2],A            (0472)    mov   [X+2], A
05F7: 5D 32    MOV   A,REG[0x32]        (0473)    mov   A, reg[stateTimer_COMPARE_LSB_REG]
05F9: 54 03    MOV   [X+3],A            (0474)    mov   [X+3], A
05FB: 70 3F    AND   F,0x3F             
05FD: 71 C0    OR    F,0xC0             
                                        (0475)    RAM_EPILOGUE RAM_USE_CLASS_3
05FF: 7F       RET                      (0476)    ret
                                        (0477) 
                                        (0478) .ENDSECTION
                                        (0479) 
                                        (0480) ; End of File stateTimer.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0600: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0601: 10       PUSH  X                  (0209)     push  X
0602: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0603: B0 04    JNZ   0x0608             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0605: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
0606: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0607: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
0608: 90 44    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_Write_Data|LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
060A: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
060B: 18       POP   A                  (0220)     pop   A
060C: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
060D: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
060F: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0610: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
0622: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
0623: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
0624: 67       ASR   A                  (0262)     asr   A
0625: 67       ASR   A                  (0263)     asr   A
0626: 67       ASR   A                  (0264)     asr   A
0627: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0629: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
062B: 90 21    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_Write_Data|LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
062D: 18       POP   A                  (0268)     pop   A                            ; Restore value
062E: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
0630: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
0632: 90 1A    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_Write_Data|LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
0634: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0635: 4B       SWAP  A,X                (0305)     swap  A,X
0636: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
0638: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
0639: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
063B: 7F       RET                      (0310)     ret
063C: 70 BF    AND   F,0xBF             
063E: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0640: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0642: A0 06    JZ    0x0649             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
0644: 90 08    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_Write_Data|LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
0646: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0647: 8F F8    JMP   0x0640             (0351)     jmp   .Loop_PrString               ; Go get next character
0649: 70 3F    AND   F,0x3F             
064B: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
064D: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
064E: 90 65    CALL  0x06B5             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
0650: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
0651: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0652: 67       ASR   A                  (0390)     asr   A
0653: 67       ASR   A                  (0391)     asr   A
0654: 67       ASR   A                  (0392)     asr   A
0655: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0657: 90 3B    CALL  0x0694             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
0659: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
065A: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
065C: 40       NOP                      (0397)     nop
065D: 40       NOP                      (0398)     nop
065E: 40       NOP                      (0399)     nop
065F: 90 33    CALL  0x0694             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0661: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0662: 90 51    CALL  0x06B5             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
0664: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0665: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0666: 67       ASR   A                  (0436)     asr   A
0667: 67       ASR   A                  (0437)     asr   A
0668: 67       ASR   A                  (0438)     asr   A
0669: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
066B: 90 09    CALL  0x0676             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
066D: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
066E: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
0670: 40       NOP                      (0443)     nop
0671: 40       NOP                      (0444)     nop
0672: 40       NOP                      (0445)     nop
0673: 90 01    CALL  0x0676             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0675: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0676: 08       PUSH  A                  (0477)     push  A
0677: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
067A: 26 00 80 AND   [0x0],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
067D: 51 00    MOV   A,[0x0]            (0480)     mov   A,[Port_2_Data_SHADE]
067F: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
0681: 18       POP   A                  (0483)     pop   A
0682: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
0684: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
0686: 2A 00    OR    A,[0x0]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0688: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
068A: 53 00    MOV   [0x0],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
068C: 40       NOP                      (0489)     nop
068D: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
068F: 53 00    MOV   [0x0],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0691: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0693: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0694: 08       PUSH  A                  (0523)     push  A
0695: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
0698: 26 00 80 AND   [0x0],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
069B: 2E 00 20 OR    [0x0],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
069E: 51 00    MOV   A,[0x0]            (0527)     mov   A,[Port_2_Data_SHADE]
06A0: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
06A2: 18       POP   A                  (0530)     pop   A
06A3: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
06A5: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
06A7: 2A 00    OR    A,[0x0]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
06A9: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
06AB: 53 00    MOV   [0x0],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
06AD: 40       NOP                      (0536)     NOP
06AE: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
06B0: 53 00    MOV   [0x0],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
06B2: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
06B4: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
06B5: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
06B6: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
06B9: 26 00 80 AND   [0x0],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
06BC: 51 00    MOV   A,[0x0]            (0574)     mov   A,[Port_2_Data_SHADE]
06BE: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
06C0: 26 01 F0 AND   [0x1],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
06C3: 51 01    MOV   A,[0x1]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
06C5: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
06C7: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
06C9: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
06CB: 2E 00 40 OR    [0x0],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
06CE: 51 00    MOV   A,[0x0]            (0584)     mov   A,[Port_2_Data_SHADE]
06D0: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
06D2: 40       NOP                      (0586)     NOP
                                        (0587) 
06D3: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
06D4: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
06D6: 2E 00 50 OR    [0x0],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
06D9: 51 00    MOV   A,[0x0]            (0593)     mov   A,[Port_2_Data_SHADE]
06DB: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
06DD: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
06DE: 40       NOP                      (0597)     nop
06DF: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
06E1: 08       PUSH  A                  (0610)     push  A
06E2: 26 00 C0 AND   [0x0],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
06E5: 51 00    MOV   A,[0x0]            (0612)     mov   A,[Port_2_Data_SHADE]
06E7: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
06E9: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
06EA: 40       NOP                      (0616)     nop                                    ; fastest PSoC
06EB: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
06EC: 2E 00 50 OR    [0x0],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
06EF: 51 00    MOV   A,[0x0]            (0620)     mov   A,[Port_2_Data_SHADE]
06F1: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
06F3: 40       NOP                      (0623)     nop
06F4: 40       NOP                      (0624)     nop
                                        (0625) 
06F5: 26 00 C0 AND   [0x0],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
06F8: 51 00    MOV   A,[0x0]            (0627)     mov   A,[Port_2_Data_SHADE]
06FA: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
06FC: 18       POP   A                  (0630)     pop   A
06FD: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
06FF: A0 04    JZ    0x0704             (0633)     jz    .UNLOCK
0701: 79       DEC   X                  (0634)     dec   X
0702: BF D3    JNZ   0x06D6             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0704: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0705: 2E 01 7F OR    [0x1],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
0708: 51 01    MOV   A,[0x1]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
070A: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
070C: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
070E: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0710: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0711: 7F       RET                      (0646)     ret
0712: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0715: 26 01 80 AND   [0x1],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
0718: 2E 01 7F OR    [0x1],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
071B: 26 02 80 AND   [0x2],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
071E: 51 01    MOV   A,[0x1]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
0720: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0722: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
0724: 51 02    MOV   A,[0x2]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0726: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
0728: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
072A: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
072C: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
072E: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0730: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
0732: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0734: 9F 40    CALL  0x0676             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
0736: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0738: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
073A: 50 03    MOV   A,0x3              (0707)     mov   A,03h
073C: 9F 38    CALL  0x0676             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
073E: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
0740: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
0742: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
0744: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0746: 9F 2E    CALL  0x0676             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
0748: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
074A: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
074C: 50 02    MOV   A,0x2              (0720)     mov   A,02h
074E: 9F 26    CALL  0x0676             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
0750: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0752: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
0754: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0756: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
0758: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
075A: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
075C: 50 01    MOV   A,0x1              (0731)     mov   A,01h
075E: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
0760: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0762: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
0764: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0766: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
0768: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
076A: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
076C: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
076E: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
0770: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
0772: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
0774: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
0776: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
0778: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
077A: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
077C: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
077E: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0780: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0785: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0787: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0788: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
078A: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
078B: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
078D: 20       POP   X                  (0795)     pop   X
                                        (0796) 
078E: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
0790: 70 3F    AND   F,0x3F             
0792: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0794: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0795: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0797: 78       DEC   A                  (0828)     dec   A
0798: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
079A: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
07A3: 08       PUSH  A                  (0871)     push  A
07A4: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
07A6: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
07A8: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
07AA: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
07AC: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
07AE: D0 06    JNC   0x07B5             (0877)     jnc   .Delay50u_End
07B0: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
07B2: 78       DEC   A                  (0880)     dec   A                              ; [4]
07B3: BF FE    JNZ   0x07B2             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
07B5: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
07B6: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
07B7: 4F       MOV   X,SP               (1015)     mov   X, SP
07B8: 10       PUSH  X                  (1016)     push  X
07B9: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
07BB: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
07BD: 70 3F    AND   F,0x3F             
07BF: 71 C0    OR    F,0xC0             
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
07C1: 9F C2    CALL  _LCD_Position      (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
07C3: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
07C4: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
07C7: B0 05    JNZ   0x07CD             (1026)     jnz   .LCD_CHECK1
07C9: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
07CB: 80 11    JMP   0x07DD             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
07CD: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
07D0: D0 07    JNC   0x07D8             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
07D2: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
07D4: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
07D6: 80 06    JMP   0x07DD             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
07D8: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
07DA: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
07DD: 9E 6F    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_Write_Data|LCD_WriteData(1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
07DF: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
07E1: BF E2    JNZ   0x07C4             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
07E3: 70 3F    AND   F,0x3F             
07E5: 71 C0    OR    F,0xC0             
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
07E7: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
07E8: 4F       MOV   X,SP               (1168)     mov   X, SP
07E9: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
07EB: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
07ED: 08       PUSH  A                  (1172)     push  A
07EE: FF 91    INDEX LCD_ROW_OFFSET     (1173)     index LCD_ROW_OFFSET  ; Get row offset
07F0: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
07F2: 9E 6E    CALL  _LCD_Control       (1175)     call  LCD_Control                  ; Position Cursor
07F4: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
07F7: B0 05    JNZ   0x07FD             (1177)     jnz   .VBG_NZ_SEG
07F9: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
07FB: 80 13    JMP   0x080F             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
07FD: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
0800: D0 09    JNC   0x080A             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
0802: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
0804: 78       DEC   A                  (1185)     dec   A
0805: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
0808: 80 06    JMP   0x080F             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
080A: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
080D: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
080F: 9E 3D    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_Write_Data|LCD_WriteData(1194)     call  LCD_WriteData                ; Write value
0811: 18       POP   A                  (1195)     pop   A
0812: 78       DEC   A                  (1196)     dec   A
0813: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
0815: BF D7    JNZ   0x07ED             (1198)     jnz   .VBG_LOOP
0817: 70 3F    AND   F,0x3F             
0819: 71 C0    OR    F,0xC0             
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
081B: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
081C: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
081D: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
081E: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
081F: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0821: 9E 3F    CALL  _LCD_Control       (1243)     call  LCD_Control                  ; Position the CG pointer
0823: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
0826: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
0829: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
082B: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
082D: D0 05    JNC   0x0833             (1251)     jnc   .VBG_SOLID
082F: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
0831: 80 03    JMP   0x0835             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
0833: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
0835: 9E 17    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_Write_Data|LCD_WriteData(1257)     call  LCD_WriteData                ; character data
0837: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
0839: BF EF    JNZ   0x0829             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
083B: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
083D: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
0840: BF E5    JNZ   0x0826             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
0842: 18       POP   A                  (1264)     pop  A
0843: 18       POP   A                  (1265)     pop  A
0844: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
0846: 9E 1A    CALL  _LCD_Control       (1267)     call LCD_Control                   ; need this.
0848: 70 3F    AND   F,0x3F             
084A: 71 C0    OR    F,0xC0             
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
084C: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
085B: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
085C: 38 03    ADD   SP,0x3             (1320)     add   SP,3
085E: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
0860: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0862: 9D FE    CALL  _LCD_Control       (1324)     call  LCD_Control                  ; Position the CG pointer
0864: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
0867: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
086A: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
086C: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
086F: B0 05    JNZ   0x0875             (1332)     jnz   .BG_OTHER
0871: FF DA    INDEX LCD_BG_TYPE1       (1333)     index LCD_BG_TYPE1
0873: 80 03    JMP   0x0877             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
0875: FF DD    INDEX LCD_BG_TYPE2       (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
0877: 9D D5    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_Write_Data|LCD_WriteData(1338)     call  LCD_WriteData
0879: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
087B: BF EE    JNZ   0x086A             (1340)     jnz   .BG_Loop2
087D: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
087F: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
0882: BF E4    JNZ   0x0867             (1343)     jnz   .BG_Loop1
                                        (1344) 
0884: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
0886: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_DISP_ON
0888: 9D D8    CALL  _LCD_Control       (1347)     call  LCD_Control
088A: 70 3F    AND   F,0x3F             
088C: 71 C0    OR    F,0xC0             
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
088E: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: .\lib.asm                         (0001) include "m8c.inc"       ; part specific constants and macros
                                        (0002) include "memory.inc"    ; Constants & macros for SMM/LMM and Compiler
                                        (0003) include "PSoCAPI.inc"   ; PSoC API definitions for all User Modules
                                        (0004) 
                                        (0005) area text (ROM, REL)
                                        (0006) 
                                        (0007) PRT0DR: equ 0x00
                                        (0008) PRT1DR: equ 0x04
                                        (0009) milisec: equ 0x10
                                        (0010) seconds: equ 0x11
                                        (0011) minutes: equ 0x12
                                        (0012) hour: equ 0x13
                                        (0013) stateTimerFlag: equ 0x14
                                        (0014) accuracy: equ 0x20
                                        (0015) accuracyItr: equ 0x21
                                        (0016) stateTimerMilisec: equ 0x22
                                        (0017) stateTimerSeconds: equ 0x23
                                        (0018) stateTimerMinutes: equ 0x24
                                        (0019) stateTimerHour: equ 0x25
                                        (0020) stateTimerAccuracy: equ 0x26
                                        (0021) SWFlag: equ 0x27
                                        (0022) currentState: equ 0x28
                                        (0023) 
                                        (0024) Export _clearStateTimerVar
                                        (0025) Export _clearSWVar
                                        (0026) Export _stopStateTimer
                                        (0027) Export _printSWInit
                                        (0028) 
                                        (0029) .SECTION 
                                        (0030) 	_clearStateTimerVar:
088F: 50 00    MOV   A,0x0              (0031) 	   	mov A , 0x00
0891: 08       PUSH  A                  (0032) 	   	push A
0892: 50 00    MOV   A,0x0              (0033) 	   	mov A , 0x00
0894: 08       PUSH  A                  (0034) 	   	push A
0895: 50 C3    MOV   A,0xC3             (0035) 	   	mov A , 0xC3
0897: 08       PUSH  A                  (0036) 	   	push A
0898: 50 4F    MOV   A,0x4F             (0037) 	   	mov A , 0x4F
089A: 08       PUSH  A                  (0038) 	   	push A
089B: 7C 05 57 LCALL _stateTimer_WritePeriod(0039) 	   	lcall stateTimer_WritePeriod
089E: 55 22 00 MOV   [0x22],0x0         (0040) 		mov [stateTimerMilisec] , 0x00
08A1: 55 23 00 MOV   [0x23],0x0         (0041) 		mov [stateTimerSeconds] , 0x00
08A4: 55 24 00 MOV   [0x24],0x0         (0042) 		mov [stateTimerMinutes] , 0x00
08A7: 55 25 00 MOV   [0x25],0x0         (0043) 		mov [stateTimerHour] ,0x00
08AA: 7F       RET                      (0044) 		ret
                                        (0045) .ENDSECTION 
                                        (0046) 	
                                        (0047) .SECTION 
                                        (0048) 	_clearSWVar:
08AB: 50 00    MOV   A,0x0              (0049) 		mov A , 0x00
08AD: 08       PUSH  A                  (0050) 	   	push A
08AE: 50 01    MOV   A,0x1              (0051) 	   	mov A , 0x01
08B0: 08       PUSH  A                  (0052) 	   	push A
08B1: 50 86    MOV   A,0x86             (0053) 	   	mov A , 0x86
08B3: 08       PUSH  A                  (0054) 	   	push A
08B4: 50 9F    MOV   A,0x9F             (0055) 	   	mov A , 0x9F
08B6: 08       PUSH  A                  (0056) 	   	push A
08B7: 7C 04 74 LCALL _SW_WritePeriod    (0057) 	   	lcall SW_WritePeriod
08BA: 55 10 00 MOV   [0x10],0x0         (0058) 		mov [milisec] , 0x00
08BD: 55 11 00 MOV   [0x11],0x0         (0059) 		mov [seconds] , 0x00
08C0: 55 12 00 MOV   [0x12],0x0         (0060) 		mov [minutes] , 0x00
08C3: 55 13 00 MOV   [0x13],0x0         (0061) 		mov [hour] ,0x00
08C6: 7F       RET                      (0062) 		ret
                                        (0063) .ENDSECTION 
                                        (0064) 	
                                        (0065) .SECTION	
                                        (0066) 	_stopStateTimer: 
08C7: 9C 8A    CALL  _stateTimer_Stop   (0067) 		call stateTimer_Stop
08C9: 9C 80    CALL  _stateTimer_DisableInt(0068) 		call stateTimer_DisableInt
08CB: 55 14 00 MOV   [0x14],0x0         (0069) 		mov [stateTimerFlag] , 0x00
08CE: 7F       RET                      (0070) 		ret
                                        (0071) .ENDSECTION 
                                        (0072) 	
                                        (0073) .SECTION
                                        (0074) 	_printSWInit:
08CF: 9E 41    CALL  _LCD_Init|LCD_Start|_LCD_Start|LCD_Init(0075) 		call LCD_Start
08D1: 50 00    MOV   A,0x0              (0076) 		mov    A,00
08D3: 57 00    MOV   X,0x0              (0077) 		mov    X,00
08D5: 9E AE    CALL  _LCD_Position      (0078) 	   	call   LCD_Position
08D7: 51 13    MOV   A,[0x13]           (0079) 	   	mov    A,[hour]
08D9: 9D 47    CALL  _LCD_PrHexByte     (0080) 	   	call   LCD_PrHexByte   
                                        (0081) 		
08DB: 50 00    MOV   A,0x0              (0082) 		mov    A,00
08DD: 57 02    MOV   X,0x2              (0083) 		mov    X,02
08DF: 9E A4    CALL  _LCD_Position      (0084) 	   	call   LCD_Position
08E1: 50 09    MOV   A,0x9              (0085) 		mov    A,>COLON2
08E3: 57 23    MOV   X,0x23             (0086) 	   	mov    X,<COLON2
08E5: 9D 19    CALL  _LCD_PrCString     (0087) 	   	call   LCD_PrCString
                                        (0088) 		
08E7: 50 00    MOV   A,0x0              (0089) 		mov    A,00
08E9: 57 03    MOV   X,0x3              (0090) 		mov    X,03
08EB: 9E 98    CALL  _LCD_Position      (0091) 	   	call   LCD_Position
08ED: 51 12    MOV   A,[0x12]           (0092) 	   	mov    A,[minutes]
08EF: 9D 31    CALL  _LCD_PrHexByte     (0093) 	   	call   LCD_PrHexByte   
                                        (0094) 		
08F1: 50 00    MOV   A,0x0              (0095) 		mov    A,00
08F3: 57 05    MOV   X,0x5              (0096) 		mov    X,05
08F5: 9E 8E    CALL  _LCD_Position      (0097) 	   	call   LCD_Position
08F7: 50 09    MOV   A,0x9              (0098) 		mov    A,>COLON2
08F9: 57 23    MOV   X,0x23             (0099) 	   	mov    X,<COLON2
08FB: 9D 03    CALL  _LCD_PrCString     (0100) 	   	call   LCD_PrCString   
                                        (0101) 		
08FD: 50 00    MOV   A,0x0              (0102) 		mov    A,00
08FF: 57 06    MOV   X,0x6              (0103) 		mov    X,06
0901: 9E 82    CALL  _LCD_Position      (0104) 	   	call   LCD_Position
0903: 51 11    MOV   A,[0x11]           (0105) 	   	mov    A,[seconds]
0905: 9D 1B    CALL  _LCD_PrHexByte     (0106) 	   	call   LCD_PrHexByte   
                                        (0107) 		
0907: 50 00    MOV   A,0x0              (0108) 		mov    A,00
0909: 57 0A    MOV   X,0xA              (0109) 		mov    X,10
090B: 9E 78    CALL  _LCD_Position      (0110) 	   	call   LCD_Position
090D: 50 09    MOV   A,0x9              (0111) 		mov    A,>COLON2
090F: 57 23    MOV   X,0x23             (0112) 	   	mov    X,<COLON2
0911: 9C ED    CALL  _LCD_PrCString     (0113) 	   	call   LCD_PrCString   
                                        (0114) 		
0913: 50 00    MOV   A,0x0              (0115) 		mov    A,00
0915: 57 0B    MOV   X,0xB              (0116) 		mov    X,11
0917: 9E 6C    CALL  _LCD_Position      (0117) 	   	call   LCD_Position
0919: 51 10    MOV   A,[0x10]           (0118) 		mov    A,[milisec]
091B: 9D 05    CALL  _LCD_PrHexByte     (0119) 	   	call   LCD_PrHexByte  
091D: 7F       RET                      (0120) 		ret
                                        (0121) .ENDSECTION 
                                        (0122) 
                                        (0123) .LITERAL
                                        (0124) 	highStr1:
                                        (0125) 		ds  "HIGH"
                                        (0126) 		db  00h                   ; String should always be null terminated		
                                        (0127) .ENDLITERAL
                                        (0128) 
                                        (0129) .LITERAL
                                        (0130) 	COLON2:
                                        (0131) 		ds  ":"
                                        (0132) 		db  00h
                                        (0133) .ENDLITERAL
FILE: .\main.asm                        (0001) ;-----------------------------------------------------------------------------
0929: 71 01    OR    F,0x1              (0002) ; Assembly main line
                                        (0003) ;-----------------------------------------------------------------------------
                                        (0004) 
                                        (0005) include "m8c.inc"       ; part specific constants and macros
                                        (0006) include "memory.inc"    ; Constants & macros for SMM/LMM and Compiler
                                        (0007) include "PSoCAPI.inc"   ; PSoC API definitions for all User Modules
                                        (0008) 
                                        (0009) area text (ROM, REL)
                                        (0010) 
                                        (0011) export _main
                                        (0012) 
                                        (0013) ;Memory Address Refrence
                                        (0014) PRT0DR: equ 0x00
                                        (0015) PRT1DR: equ 0x04
                                        (0016) milisec: equ 0x10
                                        (0017) seconds: equ 0x11
                                        (0018) minutes: equ 0x12
                                        (0019) hour: equ 0x13
                                        (0020) stateTimerFlag: equ 0x14
                                        (0021) accuracy: equ 0x20
                                        (0022) accuracyItr: equ 0x21
                                        (0023) stateTimerMilisec: equ 0x22
                                        (0024) stateTimerSeconds: equ 0x23
                                        (0025) stateTimerMinutes: equ 0x24
                                        (0026) stateTimerHour: equ 0x25
                                        (0027) stateTimerAccuracy: equ 0x26
                                        (0028) SWFlag: equ 0x27
                                        (0029) currentState: equ 0x28
                                        (0030) 
                                        (0031) _dwElapsedTime::  
                                        (0032) 	dwElapsedTime::    BLK    4
                                        (0033) 
                                        (0034) 
                                        (0035) ;Mask Initilization
                                        (0036) btnMSK: equ 0x01
                                        (0037) clearFlagMsk: equ 249
                                        (0038) 
                                        (0039) _main:
                                        (0040) 
                                        (0041)     M8C_EnableGInt ; Uncomment this line to enable Global Interrupts
                                        (0042) 	; Insert your main assembly code here.
092B: 9D E5    CALL  _LCD_Init|LCD_Start|_LCD_Start|LCD_Init(0043) 	call LCD_Start
092D: 55 10 00 MOV   [0x10],0x0         (0044) 	mov [milisec] , 0x00
0930: 55 11 00 MOV   [0x11],0x0         (0045) 	mov [seconds] , 0x00
0933: 55 12 00 MOV   [0x12],0x0         (0046) 	mov [minutes] , 0x00
0936: 55 13 00 MOV   [0x13],0x0         (0047) 	mov [hour] ,0x00
0939: 55 22 00 MOV   [0x22],0x0         (0048) 	mov [stateTimerMilisec] , 0x00
093C: 55 23 00 MOV   [0x23],0x0         (0049) 	mov [stateTimerSeconds] , 0x00
093F: 55 24 00 MOV   [0x24],0x0         (0050) 	mov [stateTimerMinutes] , 0x00
0942: 55 25 00 MOV   [0x25],0x0         (0051) 	mov [stateTimerHour] ,0x00
0945: 55 26 05 MOV   [0x26],0x5         (0052) 	mov [stateTimerAccuracy] , 0x05
0948: 55 14 00 MOV   [0x14],0x0         (0053) 	mov [stateTimerFlag] , 0x00
094B: 55 20 01 MOV   [0x20],0x1         (0054) 	mov [accuracy] , 0x01
094E: 55 21 00 MOV   [0x21],0x0         (0055) 	mov [accuracyItr] , 0x00
0951: 55 27 00 MOV   [0x27],0x0         (0056) 	mov [SWFlag] , 0x00
0954: 55 28 04 MOV   [0x28],0x4         (0057) 	mov [currentState] , 0x04
                                        (0058) 	
                                        (0059) _check:
0957: 70 F9    AND   F,0xF9             (0060) 	and F , clearFlagMsk
0959: 3C 14 01 CMP   [0x14],0x1         (0061) 	cmp [stateTimerFlag] , 0x01
095C: A0 1B    JZ    0x0978             (0062) 	jz _checkLongPress
                                        (0063) 	
                                        (0064) _poll:
095E: 5D 04    MOV   A,REG[0x4]         (0065) 	mov a , REG[PRT1DR]
0960: 21 01    AND   A,0x1              (0066) 	and a , btnMSK
0962: 70 F9    AND   F,0xF9             (0067) 	and F , clearFlagMsk
0964: 39 01    CMP   A,0x1              (0068) 	cmp a , 0x01
0966: BF F0    JNZ   0x0957             (0069) 	jnz _check
0968: 70 F9    AND   F,0xF9             (0070) 	and F , clearFlagMsk
096A: 3C 14 01 CMP   [0x14],0x1         (0071) 	cmp [stateTimerFlag] , 0x01
096D: AF F0    JZ    0x095E             (0072) 	jz _poll
096F: 9B D6    CALL  _stateTimer_EnableInt(0073) 	call stateTimer_EnableInt
0971: 9B DC    CALL  _stateTimer_Start  (0074) 	call stateTimer_Start
0973: 55 14 01 MOV   [0x14],0x1         (0075) 	mov [stateTimerFlag] , 0x01
0976: 8F E7    JMP   0x095E             (0076) 	jmp _poll
                                        (0077) 	
                                        (0078) _checkLongPress:
                                        (0079) 	;call _stopStateTimer
0978: 9B D9    CALL  _stateTimer_Stop   (0080) 		call stateTimer_Stop
097A: 9B CF    CALL  _stateTimer_DisableInt(0081) 		call stateTimer_DisableInt
097C: 55 14 00 MOV   [0x14],0x0         (0082) 		mov [stateTimerFlag] , 0x00
097F: 3C 23 01 CMP   [0x23],0x1         (0083) 	cmp [stateTimerSeconds] , 0x01
0982: D1 34    JNC   0x0AB7             (0084) 	jnc _goToNextState
0984: 80 01    JMP   0x0986             (0085) 	jmp _checkShortPressState
                                        (0086) 	
                                        (0087) _checkShortPressState:
                                        (0088) 	;call _clearStateTimerVar
0986: 50 00    MOV   A,0x0              (0089) 		mov A , 0x00
0988: 08       PUSH  A                  (0090) 	   	push A
0989: 50 00    MOV   A,0x0              (0091) 	   	mov A , 0x00
098B: 08       PUSH  A                  (0092) 	   	push A
098C: 50 C3    MOV   A,0xC3             (0093) 	   	mov A , 0xC3
098E: 08       PUSH  A                  (0094) 	   	push A
098F: 50 4F    MOV   A,0x4F             (0095) 	   	mov A , 0x4F
0991: 08       PUSH  A                  (0096) 	   	push A
0992: 7C 05 57 LCALL _stateTimer_WritePeriod(0097) 	   	lcall stateTimer_WritePeriod
0995: 55 22 00 MOV   [0x22],0x0         (0098) 		mov [stateTimerMilisec] , 0x00
0998: 55 23 00 MOV   [0x23],0x0         (0099) 		mov [stateTimerSeconds] , 0x00
099B: 55 24 00 MOV   [0x24],0x0         (0100) 		mov [stateTimerMinutes] , 0x00
099E: 55 25 00 MOV   [0x25],0x0         (0101) 		mov [stateTimerHour] ,0x00
09A1: 3C 28 01 CMP   [0x28],0x1         (0102) 	cmp [currentState] , 0x01
09A4: A1 F8    JZ    0x0B9D             (0103) 	jz _goToNextAccuracy
09A6: 3C 28 02 CMP   [0x28],0x2         (0104) 	cmp [currentState] , 0x02
09A9: A0 08    JZ    0x09B2             (0105) 	jz _checkSWState
09AB: 3C 28 03 CMP   [0x28],0x3         (0106) 	cmp [currentState] , 0x03
09AE: A0 03    JZ    0x09B2             (0107) 	jz _checkSWState
09B0: 8F A6    JMP   0x0957             (0108) 	jmp _check
                                        (0109) 	
                                        (0110) _checkSWState:
09B2: 3C 27 01 CMP   [0x27],0x1         (0111) 	cmp [SWFlag] , 0x01
09B5: A0 13    JZ    0x09C9             (0112) 	jz _SWstop
09B7: 3C 28 03 CMP   [0x28],0x3         (0113) 	cmp [currentState] , 0x03
09BA: A0 03    JZ    0x09BE             (0114) 	jz _SWstart
09BC: 8F 9A    JMP   0x0957             (0115) 	jmp _check
                                        (0116) 	
                                        (0117) _SWstart:
09BE: 9A A4    CALL  _SW_EnableInt      (0118) 	call SW_EnableInt
09C0: 9D 50    CALL  _LCD_Init|LCD_Start|_LCD_Start|LCD_Init(0119) 	call LCD_Start
09C2: 9A A8    CALL  _SW_Start          (0120) 	call SW_Start
09C4: 55 27 01 MOV   [0x27],0x1         (0121) 	mov [SWFlag] , 0x01
09C7: 8F 8F    JMP   0x0957             (0122) 	jmp _check
                                        (0123) 	
                                        (0124) _SWstop:
09C9: 9A A5    CALL  _SW_Stop           (0125) 	call SW_Stop
09CB: 9A 9B    CALL  _SW_DisableInt     (0126) 	call SW_DisableInt
                                        (0127) 	;call _clearSWVar
09CD: 3C 21 00 CMP   [0x21],0x0         (0128) 	cmp [accuracyItr],0x00
09D0: A0 08    JZ    0x09D9             (0129) 	jz _compAccuracy1
09D2: 3C 21 05 CMP   [0x21],0x5         (0130) 	cmp [accuracyItr],0x05
09D5: A0 23    JZ    0x09F9             (0131) 	jz _compAccuracy5
09D7: 80 41    JMP   0x0A19             (0132) 	jmp _compAccuracy01
                                        (0133) 	
                                        (0134) _compAccuracy1:
09D9: 50 00    MOV   A,0x0              (0135) 		mov A , 0x00
09DB: 08       PUSH  A                  (0136) 	   	push A
09DC: 50 01    MOV   A,0x1              (0137) 	   	mov A , 0x01
09DE: 08       PUSH  A                  (0138) 	   	push A
09DF: 50 86    MOV   A,0x86             (0139) 	   	mov A , 0x86
09E1: 08       PUSH  A                  (0140) 	   	push A
09E2: 50 9F    MOV   A,0x9F             (0141) 	   	mov A , 0x9F
09E4: 08       PUSH  A                  (0142) 	   	push A
09E5: 7C 04 74 LCALL _SW_WritePeriod    (0143) 	   	lcall SW_WritePeriod
09E8: 55 10 00 MOV   [0x10],0x0         (0144) 		mov [milisec] , 0x00
09EB: 55 11 00 MOV   [0x11],0x0         (0145) 		mov [seconds] , 0x00
09EE: 55 12 00 MOV   [0x12],0x0         (0146) 		mov [minutes] , 0x00
09F1: 55 13 00 MOV   [0x13],0x0         (0147) 		mov [hour] ,0x00
09F4: 55 27 00 MOV   [0x27],0x0         (0148) 		mov [SWFlag] , 0x00
09F7: 80 41    JMP   0x0A39             (0149) 	jmp _delayDisplaySWTime
                                        (0150) 	
                                        (0151) _compAccuracy5:
09F9: 50 00    MOV   A,0x0              (0152) 	mov A , 0x00
09FB: 08       PUSH  A                  (0153)    	push A
09FC: 50 00    MOV   A,0x0              (0154)    	mov A , 0x00
09FE: 08       PUSH  A                  (0155)    	push A
09FF: 50 C3    MOV   A,0xC3             (0156)    	mov A , 0xC3
0A01: 08       PUSH  A                  (0157)    	push A
0A02: 50 4F    MOV   A,0x4F             (0158)    	mov A , 0x4F
0A04: 08       PUSH  A                  (0159)    	push A
0A05: 7C 04 74 LCALL _SW_WritePeriod    (0160) 	   	lcall SW_WritePeriod
0A08: 55 10 00 MOV   [0x10],0x0         (0161) 		mov [milisec] , 0x00
0A0B: 55 11 00 MOV   [0x11],0x0         (0162) 		mov [seconds] , 0x00
0A0E: 55 12 00 MOV   [0x12],0x0         (0163) 		mov [minutes] , 0x00
0A11: 55 13 00 MOV   [0x13],0x0         (0164) 		mov [hour] ,0x00
0A14: 55 27 00 MOV   [0x27],0x0         (0165) 		mov [SWFlag] , 0x00
0A17: 80 21    JMP   0x0A39             (0166) 	jmp _delayDisplaySWTime
                                        (0167) 
                                        (0168) _compAccuracy01:
0A19: 50 00    MOV   A,0x0              (0169) 	mov A , 0x00
0A1B: 08       PUSH  A                  (0170)    	push A
0A1C: 50 00    MOV   A,0x0              (0171)    	mov A , 0x00
0A1E: 08       PUSH  A                  (0172)    	push A
0A1F: 50 27    MOV   A,0x27             (0173)    	mov A , 0x27
0A21: 08       PUSH  A                  (0174)    	push A
0A22: 50 0F    MOV   A,0xF              (0175)    	mov A , 0x0F
0A24: 08       PUSH  A                  (0176)    	push A
0A25: 7C 04 74 LCALL _SW_WritePeriod    (0177) 	   	lcall SW_WritePeriod
0A28: 55 10 00 MOV   [0x10],0x0         (0178) 		mov [milisec] , 0x00
0A2B: 55 11 00 MOV   [0x11],0x0         (0179) 		mov [seconds] , 0x00
0A2E: 55 12 00 MOV   [0x12],0x0         (0180) 		mov [minutes] , 0x00
0A31: 55 13 00 MOV   [0x13],0x0         (0181) 		mov [hour] ,0x00
0A34: 55 27 00 MOV   [0x27],0x0         (0182) 		mov [SWFlag] , 0x00
0A37: 80 01    JMP   0x0A39             (0183) 	jmp _delayDisplaySWTime
                                        (0184) 	
                                        (0185) 	
                                        (0186) 	
                                        (0187) _delayDisplaySWTime:
0A39: 9B 0C    CALL  _stateTimer_EnableInt(0188) 	call stateTimer_EnableInt
0A3B: 9B 12    CALL  _stateTimer_Start  (0189) 	call stateTimer_Start
0A3D: 55 14 01 MOV   [0x14],0x1         (0190) 	mov [stateTimerFlag] , 0x01
                                        (0191) _inter:
0A40: 3C 23 05 CMP   [0x23],0x5         (0192) 	cmp [stateTimerSeconds] , 0x05
0A43: CF FC    JC    0x0A40             (0193) 	jc _inter
0A45: 9B 0C    CALL  _stateTimer_Stop   (0194) 	call stateTimer_Stop
0A47: 9B 02    CALL  _stateTimer_DisableInt(0195) 	call stateTimer_DisableInt
0A49: 50 00    MOV   A,0x0              (0196) 		mov A , 0x00
0A4B: 08       PUSH  A                  (0197) 	   	push A
0A4C: 50 00    MOV   A,0x0              (0198) 	   	mov A , 0x00
0A4E: 08       PUSH  A                  (0199) 	   	push A
0A4F: 50 C3    MOV   A,0xC3             (0200) 	   	mov A , 0xC3
0A51: 08       PUSH  A                  (0201) 	   	push A
0A52: 50 4F    MOV   A,0x4F             (0202) 	   	mov A , 0x4F
0A54: 08       PUSH  A                  (0203) 	   	push A
0A55: 7C 05 57 LCALL _stateTimer_WritePeriod(0204) 	   	lcall stateTimer_WritePeriod
0A58: 55 22 00 MOV   [0x22],0x0         (0205) 		mov [stateTimerMilisec] , 0x00
0A5B: 55 23 00 MOV   [0x23],0x0         (0206) 		mov [stateTimerSeconds] , 0x00
0A5E: 55 24 00 MOV   [0x24],0x0         (0207) 		mov [stateTimerMinutes] , 0x00
0A61: 55 25 00 MOV   [0x25],0x0         (0208) 		mov [stateTimerHour] ,0x00
0A64: 55 14 00 MOV   [0x14],0x0         (0209) 		mov [stateTimerFlag] ,0x00
                                        (0210) 	;call _printSWInit
0A67: 9C A9    CALL  _LCD_Init|LCD_Start|_LCD_Start|LCD_Init(0211) 		call LCD_Start
0A69: 50 00    MOV   A,0x0              (0212) 		mov    A,00
0A6B: 57 00    MOV   X,0x0              (0213) 		mov    X,00
0A6D: 9D 16    CALL  _LCD_Position      (0214) 	   	call   LCD_Position
0A6F: 51 13    MOV   A,[0x13]           (0215) 	   	mov    A,[hour]
0A71: 9B AF    CALL  _LCD_PrHexByte     (0216) 	   	call   LCD_PrHexByte   
                                        (0217) 		
0A73: 50 00    MOV   A,0x0              (0218) 		mov    A,00
0A75: 57 02    MOV   X,0x2              (0219) 		mov    X,02
0A77: 9D 0C    CALL  _LCD_Position      (0220) 	   	call   LCD_Position
0A79: 50 0C    MOV   A,0xC              (0221) 		mov    A,>COLON1
0A7B: 57 3E    MOV   X,0x3E             (0222) 	   	mov    X,<COLON1
0A7D: 9B 81    CALL  _LCD_PrCString     (0223) 	   	call   LCD_PrCString
                                        (0224) 		
0A7F: 50 00    MOV   A,0x0              (0225) 		mov    A,00
0A81: 57 03    MOV   X,0x3              (0226) 		mov    X,03
0A83: 9D 00    CALL  _LCD_Position      (0227) 	   	call   LCD_Position
0A85: 51 12    MOV   A,[0x12]           (0228) 	   	mov    A,[minutes]
0A87: 9B 99    CALL  _LCD_PrHexByte     (0229) 	   	call   LCD_PrHexByte   
                                        (0230) 		
0A89: 50 00    MOV   A,0x0              (0231) 		mov    A,00
0A8B: 57 05    MOV   X,0x5              (0232) 		mov    X,05
0A8D: 9C F6    CALL  _LCD_Position      (0233) 	   	call   LCD_Position
0A8F: 50 0C    MOV   A,0xC              (0234) 		mov    A,>COLON1
0A91: 57 3E    MOV   X,0x3E             (0235) 	   	mov    X,<COLON1
0A93: 9B 6B    CALL  _LCD_PrCString     (0236) 	   	call   LCD_PrCString   
                                        (0237) 		
0A95: 50 00    MOV   A,0x0              (0238) 		mov    A,00
0A97: 57 06    MOV   X,0x6              (0239) 		mov    X,06
0A99: 9C EA    CALL  _LCD_Position      (0240) 	   	call   LCD_Position
0A9B: 51 11    MOV   A,[0x11]           (0241) 	   	mov    A,[seconds]
0A9D: 9B 83    CALL  _LCD_PrHexByte     (0242) 	   	call   LCD_PrHexByte   
                                        (0243) 		
0A9F: 50 00    MOV   A,0x0              (0244) 		mov    A,00
0AA1: 57 0A    MOV   X,0xA              (0245) 		mov    X,10
0AA3: 9C E0    CALL  _LCD_Position      (0246) 	   	call   LCD_Position
0AA5: 50 0C    MOV   A,0xC              (0247) 		mov    A,>COLON1
0AA7: 57 3E    MOV   X,0x3E             (0248) 	   	mov    X,<COLON1
0AA9: 9B 55    CALL  _LCD_PrCString     (0249) 	   	call   LCD_PrCString   
                                        (0250) 		
0AAB: 50 00    MOV   A,0x0              (0251) 		mov    A,00
0AAD: 57 0B    MOV   X,0xB              (0252) 		mov    X,11
0AAF: 9C D4    CALL  _LCD_Position      (0253) 	   	call   LCD_Position
0AB1: 51 10    MOV   A,[0x10]           (0254) 		mov    A,[milisec]
0AB3: 9B 6D    CALL  _LCD_PrHexByte     (0255) 	   	call   LCD_PrHexByte 
0AB5: 8E A1    JMP   0x0957             (0256) 	jmp _check
                                        (0257) 
                                        (0258) _goToNextState:
                                        (0259) 	;call _clearStateTimerVar
0AB7: 50 00    MOV   A,0x0              (0260) 		mov A , 0x00
0AB9: 08       PUSH  A                  (0261) 	   	push A
0ABA: 50 00    MOV   A,0x0              (0262) 	   	mov A , 0x00
0ABC: 08       PUSH  A                  (0263) 	   	push A
0ABD: 50 C3    MOV   A,0xC3             (0264) 	   	mov A , 0xC3
0ABF: 08       PUSH  A                  (0265) 	   	push A
0AC0: 50 4F    MOV   A,0x4F             (0266) 	   	mov A , 0x4F
0AC2: 08       PUSH  A                  (0267) 	   	push A
0AC3: 7C 05 57 LCALL _stateTimer_WritePeriod(0268) 	   	lcall stateTimer_WritePeriod
0AC6: 55 22 00 MOV   [0x22],0x0         (0269) 		mov [stateTimerMilisec] , 0x00
0AC9: 55 23 00 MOV   [0x23],0x0         (0270) 		mov [stateTimerSeconds] , 0x00
0ACC: 55 24 00 MOV   [0x24],0x0         (0271) 		mov [stateTimerMinutes] , 0x00
0ACF: 55 25 00 MOV   [0x25],0x0         (0272) 		mov [stateTimerHour] ,0x00
0AD2: 70 F9    AND   F,0xF9             (0273) 	and F , clearFlagMsk
0AD4: 3C 27 01 CMP   [0x27],0x1         (0274) 	cmp [SWFlag] , 0x01
0AD7: AE 7F    JZ    0x0957             (0275) 	jz _check
0AD9: 70 F9    AND   F,0xF9             (0276) 	and F , clearFlagMsk
0ADB: 3C 28 04 CMP   [0x28],0x4         (0277) 	cmp [currentState] , 0x04
0ADE: A0 18    JZ    0x0AF7             (0278) 	jz _setSensitivity
0AE0: 70 F9    AND   F,0xF9             (0279) 	and F , clearFlagMsk
0AE2: 3C 28 00 CMP   [0x28],0x0         (0280) 	cmp [currentState] , 0x00
0AE5: A0 24    JZ    0x0B0A             (0281) 	jz _setAccuracy
0AE7: 70 F9    AND   F,0xF9             (0282) 	and F , clearFlagMsk
0AE9: 3C 28 01 CMP   [0x28],0x1         (0283) 	cmp [currentState] , 0x01
0AEC: A0 3D    JZ    0x0B2A             (0284) 	jz _soundSW
0AEE: 70 F9    AND   F,0xF9             (0285) 	and F , clearFlagMsk
0AF0: 3C 28 02 CMP   [0x28],0x2         (0286) 	cmp [currentState] , 0x02
0AF3: A0 49    JZ    0x0B3D             (0287) 	jz _pushBtnSW
0AF5: D0 5A    JNC   0x0B50             (0288) 	jnc _displayMemory
                                        (0289) 	
                                        (0290) _setSensitivity:
0AF7: 55 28 00 MOV   [0x28],0x0         (0291) 	mov [currentState] , 0x00
0AFA: 9C 16    CALL  _LCD_Init|LCD_Start|_LCD_Start|LCD_Init(0292) 	call LCD_Start
0AFC: 50 00    MOV   A,0x0              (0293) 	mov    A,00
0AFE: 57 00    MOV   X,0x0              (0294) 	mov    X,00
0B00: 9C 83    CALL  _LCD_Position      (0295)    	call   LCD_Position
0B02: 50 0C    MOV   A,0xC              (0296) 	mov    A,>Microphone
0B04: 57 0C    MOV   X,0xC              (0297)    	mov    X,<Microphone
0B06: 9A F8    CALL  _LCD_PrCString     (0298)    	call   LCD_PrCString  
0B08: 8E 4E    JMP   0x0957             (0299) 	jmp _check
                                        (0300) 	
                                        (0301) _setAccuracy:
0B0A: 55 28 01 MOV   [0x28],0x1         (0302) 	mov [currentState] , 0x01
0B0D: 9C 03    CALL  _LCD_Init|LCD_Start|_LCD_Start|LCD_Init(0303) 	call LCD_Start
0B0F: 50 00    MOV   A,0x0              (0304) 	mov    A,00
0B11: 57 00    MOV   X,0x0              (0305) 	mov    X,00
0B13: 9C 70    CALL  _LCD_Position      (0306)    	call   LCD_Position
0B15: 50 0C    MOV   A,0xC              (0307) 	mov    A,>Accuracy
0B17: 57 17    MOV   X,0x17             (0308)    	mov    X,<Accuracy
0B19: 9A E5    CALL  _LCD_PrCString     (0309)    	call   LCD_PrCString  
0B1B: 55 21 00 MOV   [0x21],0x0         (0310) 	mov [accuracyItr] , 0x00
0B1E: 50 01    MOV   A,0x1              (0311) 	mov    A,01           ; Set cursor position at row = 0
0B20: 57 00    MOV   X,0x0              (0312) 	mov    X,00           ; col = 5
0B22: 9C 61    CALL  _LCD_Position      (0313)    	call   LCD_Position
0B24: 50 10    MOV   A,0x10             (0314) 	mov    A,0x10      ; Load pointer to ROM string
0B26: 9A FA    CALL  _LCD_PrHexByte     (0315)    	call   LCD_PrHexByte
0B28: 8E 2E    JMP   0x0957             (0316) 	jmp _check
                                        (0317) 	
                                        (0318) _soundSW:
0B2A: 55 28 02 MOV   [0x28],0x2         (0319) 	mov [currentState] , 0x02
0B2D: 9B E3    CALL  _LCD_Init|LCD_Start|_LCD_Start|LCD_Init(0320) 	call LCD_Start
0B2F: 50 00    MOV   A,0x0              (0321) 	mov    A,00
0B31: 57 00    MOV   X,0x0              (0322) 	mov    X,00
0B33: 9C 50    CALL  _LCD_Position      (0323)    	call   LCD_Position
0B35: 50 0C    MOV   A,0xC              (0324) 	mov    A,>Sound
0B37: 57 25    MOV   X,0x25             (0325)    	mov    X,<Sound
0B39: 9A C5    CALL  _LCD_PrCString     (0326)    	call   LCD_PrCString  
0B3B: 8E 1B    JMP   0x0957             (0327) 	jmp _check
                                        (0328) 	
                                        (0329) _pushBtnSW:
0B3D: 55 28 03 MOV   [0x28],0x3         (0330) 	mov [currentState] , 0x03
0B40: 9B D0    CALL  _LCD_Init|LCD_Start|_LCD_Start|LCD_Init(0331) 	call LCD_Start
0B42: 50 00    MOV   A,0x0              (0332) 	mov    A,00
0B44: 57 00    MOV   X,0x0              (0333) 	mov    X,00
0B46: 9C 3D    CALL  _LCD_Position      (0334)    	call   LCD_Position
0B48: 50 0C    MOV   A,0xC              (0335) 	mov    A,>PushBtn
0B4A: 57 2B    MOV   X,0x2B             (0336)    	mov    X,<PushBtn
0B4C: 9A B2    CALL  _LCD_PrCString     (0337)    	call   LCD_PrCString  
0B4E: 8E 08    JMP   0x0957             (0338) 	jmp _check
                                        (0339) 	
                                        (0340) _displayMemory:
0B50: 55 28 04 MOV   [0x28],0x4         (0341) 	mov [currentState] , 0x04
0B53: 9B BD    CALL  _LCD_Init|LCD_Start|_LCD_Start|LCD_Init(0342) 	call LCD_Start
0B55: 50 00    MOV   A,0x0              (0343) 	mov    A,00
0B57: 57 00    MOV   X,0x0              (0344) 	mov    X,00
0B59: 9C 2A    CALL  _LCD_Position      (0345)    	call   LCD_Position
0B5B: 50 0C    MOV   A,0xC              (0346) 	mov    A,>Memory
0B5D: 57 37    MOV   X,0x37             (0347)    	mov    X,<Memory
0B5F: 9A 9F    CALL  _LCD_PrCString     (0348)    	call   LCD_PrCString  
0B61: 8D F5    JMP   0x0957             (0349) 	jmp _check
                                        (0350) 
                                        (0351) _printHigh: 
0B63: 50 00    MOV   A,0x0              (0352) 	mov    A,00           ; Set cursor position at row = 0
0B65: 57 02    MOV   X,0x2              (0353) 	mov    X,02           ; col = 5
0B67: 9C 1C    CALL  _LCD_Position      (0354)    	call   LCD_Position
0B69: 50 0C    MOV   A,0xC              (0355) 	mov    A,>highStr      ; Load pointer to ROM string
0B6B: 57 03    MOV   X,0x3              (0356)    	mov    X,<highStr; Load pointer to ROM strin
0B6D: 9A 91    CALL  _LCD_PrCString     (0357)    	call   LCD_PrCString
0B6F: 55 22 00 MOV   [0x22],0x0         (0358) 	mov [stateTimerMilisec] , 0x00
0B72: 55 23 00 MOV   [0x23],0x0         (0359) 	mov [stateTimerSeconds] , 0x00
0B75: 55 24 00 MOV   [0x24],0x0         (0360) 	mov [stateTimerMinutes] , 0x00
0B78: 55 25 00 MOV   [0x25],0x0         (0361) 	mov [stateTimerHour] ,0x00
0B7B: 55 26 05 MOV   [0x26],0x5         (0362) 	mov [stateTimerAccuracy] , 0x05
0B7E: 8D D8    JMP   0x0957             (0363) 	jmp _check
                                        (0364) 	
                                        (0365) _printLow:
0B80: 50 01    MOV   A,0x1              (0366) 	mov    A,01           ; Set cursor position at row = 0
0B82: 57 02    MOV   X,0x2              (0367) 	mov    X,02           ; col = 5
0B84: 9B FF    CALL  _LCD_Position      (0368)    	call   LCD_Position
0B86: 50 0C    MOV   A,0xC              (0369) 	mov    A,>lowStr      ; Load pointer to ROM string
0B88: 57 08    MOV   X,0x8              (0370)    	mov    X,<lowStr; Load pointer to ROM strin
0B8A: 9A 74    CALL  _LCD_PrCString     (0371)    	call   LCD_PrCString
0B8C: 55 22 00 MOV   [0x22],0x0         (0372) 	mov [stateTimerMilisec] , 0x00
0B8F: 55 23 00 MOV   [0x23],0x0         (0373) 	mov [stateTimerSeconds] , 0x00
0B92: 55 24 00 MOV   [0x24],0x0         (0374) 	mov [stateTimerMinutes] , 0x00
0B95: 55 25 00 MOV   [0x25],0x0         (0375) 	mov [stateTimerHour] ,0x00
0B98: 55 26 05 MOV   [0x26],0x5         (0376) 	mov [stateTimerAccuracy] , 0x05
0B9B: 8D BB    JMP   0x0957             (0377) 	jmp _check
                                        (0378) 	
                                        (0379) _goToNextAccuracy:
0B9D: 3C 21 00 CMP   [0x21],0x0         (0380) 	cmp [accuracyItr] , 0x00
0BA0: A0 08    JZ    0x0BA9             (0381) 	jz _accuracyState1
0BA2: 3C 21 05 CMP   [0x21],0x5         (0382) 	cmp [accuracyItr] , 0x05
0BA5: A0 21    JZ    0x0BC7             (0383) 	jz _accuracyState2
0BA7: 80 3D    JMP   0x0BE5             (0384) 	jmp _accuracyState3
                                        (0385) 	
                                        (0386) _accuracyState1:
0BA9: 55 21 05 MOV   [0x21],0x5         (0387) 	mov [accuracyItr] , 0x05
0BAC: 50 00    MOV   A,0x0              (0388) 	mov A , 0x00
0BAE: 08       PUSH  A                  (0389)    	push A
0BAF: 50 00    MOV   A,0x0              (0390)    	mov A , 0x00
0BB1: 08       PUSH  A                  (0391)    	push A
0BB2: 50 C3    MOV   A,0xC3             (0392)    	mov A , 0xC3
0BB4: 08       PUSH  A                  (0393)    	push A
0BB5: 50 4F    MOV   A,0x4F             (0394)    	mov A , 0x4F
0BB7: 08       PUSH  A                  (0395)    	push A
0BB8: 7C 04 74 LCALL _SW_WritePeriod    (0396)    	lcall SW_WritePeriod
0BBB: 50 01    MOV   A,0x1              (0397) 	mov    A,01           ; Set cursor position at row = 0
0BBD: 57 00    MOV   X,0x0              (0398) 	mov    X,00           ; col = 5
0BBF: 9B C4    CALL  _LCD_Position      (0399)    	call   LCD_Position
0BC1: 51 21    MOV   A,[0x21]           (0400) 	mov    A,[accuracyItr]      ; Load pointer to ROM string
0BC3: 9A 5D    CALL  _LCD_PrHexByte     (0401)    	call   LCD_PrHexByte
0BC5: 8D 91    JMP   0x0957             (0402) 	jmp _check
                                        (0403) 
                                        (0404) _accuracyState2:
0BC7: 55 21 01 MOV   [0x21],0x1         (0405) 	mov [accuracyItr] , 0x01
0BCA: 50 00    MOV   A,0x0              (0406) 	mov A , 0x00
0BCC: 08       PUSH  A                  (0407)    	push A
0BCD: 50 00    MOV   A,0x0              (0408)    	mov A , 0x00
0BCF: 08       PUSH  A                  (0409)    	push A
0BD0: 50 27    MOV   A,0x27             (0410)    	mov A , 0x27
0BD2: 08       PUSH  A                  (0411)    	push A
0BD3: 50 0F    MOV   A,0xF              (0412)    	mov A , 0x0F
0BD5: 08       PUSH  A                  (0413)    	push A
0BD6: 7C 04 74 LCALL _SW_WritePeriod    (0414)    	lcall SW_WritePeriod
0BD9: 50 01    MOV   A,0x1              (0415) 	mov    A,01           ; Set cursor position at row = 0
0BDB: 57 00    MOV   X,0x0              (0416) 	mov    X,00           ; col = 5
0BDD: 9B A6    CALL  _LCD_Position      (0417)    	call   LCD_Position
0BDF: 51 21    MOV   A,[0x21]           (0418) 	mov    A,[accuracyItr]      ; Load pointer to ROM string
0BE1: 9A 3F    CALL  _LCD_PrHexByte     (0419)    	call   LCD_PrHexByte
0BE3: 8D 73    JMP   0x0957             (0420) 	jmp _check
                                        (0421) 	
                                        (0422) _accuracyState3:
0BE5: 55 21 00 MOV   [0x21],0x0         (0423) 	mov [accuracyItr] , 0x00
0BE8: 50 00    MOV   A,0x0              (0424) 	mov A , 0x00
0BEA: 08       PUSH  A                  (0425)    	push A
0BEB: 50 01    MOV   A,0x1              (0426)    	mov A , 0x01
0BED: 08       PUSH  A                  (0427)    	push A
0BEE: 50 86    MOV   A,0x86             (0428)    	mov A , 0x86
0BF0: 08       PUSH  A                  (0429)    	push A
0BF1: 50 9F    MOV   A,0x9F             (0430)    	mov A , 0x9F
0BF3: 08       PUSH  A                  (0431)    	push A
0BF4: 7C 04 74 LCALL _SW_WritePeriod    (0432)    	lcall SW_WritePeriod
0BF7: 50 01    MOV   A,0x1              (0433) 	mov    A,01           ; Set cursor position at row = 0
0BF9: 57 00    MOV   X,0x0              (0434) 	mov    X,00           ; col = 5
0BFB: 9B 88    CALL  _LCD_Position      (0435)    	call   LCD_Position
0BFD: 50 10    MOV   A,0x10             (0436) 	mov    A,0x10      ; Load pointer to ROM string
0BFF: 9A 21    CALL  _LCD_PrHexByte     (0437)    	call   LCD_PrHexByte
0C01: 8D 55    JMP   0x0957             (0438) 	jmp _check
                                        (0439) 
                                        (0440) .LITERAL
                                        (0441) 	highStr:
                                        (0442) 		ds  "HIGH"
                                        (0443) 		db  00h                   ; String should always be null terminated		
                                        (0444) .ENDLITERAL
                                        (0445) 
                                        (0446) .LITERAL
                                        (0447) 	lowStr:
                                        (0448) 		ds  "LOW"
                                        (0449) 		db  00h                   ; String should always be null terminated		
                                        (0450) .ENDLITERAL
                                        (0451) 
                                        (0452) .LITERAL
                                        (0453) 	Microphone:
                                        (0454) 		ds  "Microphone"
                                        (0455) 		db  00h
                                        (0456) .ENDLITERAL
                                        (0457) 
                                        (0458) .LITERAL
                                        (0459) 	Accuracy:
                                        (0460) 		ds  "Accuracy Mode"
                                        (0461) 		db  00h
                                        (0462) .ENDLITERAL
                                        (0463) 
                                        (0464) .LITERAL
                                        (0465) 	Sound:
                                        (0466) 		ds  "Sound"
                                        (0467) 		db  00h
                                        (0468) .ENDLITERAL
                                        (0469) 
                                        (0470) .LITERAL
                                        (0471) 	PushBtn:
                                        (0472) 		ds  "Push Button"
                                        (0473) 		db  00h
                                        (0474) .ENDLITERAL
                                        (0475) 
                                        (0476) .LITERAL
                                        (0477) 	Memory:
                                        (0478) 		ds  "Memory"
                                        (0479) 		db  00h
                                        (0480) .ENDLITERAL
                                        (0481) 
                                        (0482) .LITERAL
                                        (0483) 	COLON1:
                                        (0484) 		ds  ":"
                                        (0485) 		db  00h
                                        (0486) .ENDLITERAL
                                        (0487) 
                                        (0488) .terminate:
0C40: 8F FF    JMP   0x0C40             (0489)     jmp .terminateFILE: lib\psocgpioint.asm               (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;;*****************************************************************************
                                        (0004) ;;*****************************************************************************
                                        (0005) ;;  FILENAME: PSoCGPIOINT.asm
                                        (0006) ;;   Version: 2.0.0.20, Updated on 2003/07/17 at 12:10:35
                                        (0007) ;;  @PSOC_VERSION
                                        (0008) ;;
                                        (0009) ;;  DESCRIPTION: PSoC GPIO Interrupt Service Routine
                                        (0010) ;;-----------------------------------------------------------------------------
                                        (0011) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;;*****************************************************************************
                                        (0013) ;;*****************************************************************************
                                        (0014) 
                                        (0015) include "m8c.inc"
                                        (0016) include "PSoCGPIOINT.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export   PSoC_GPIO_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) ;-----------------------------------------------
                                        (0025) ;  Constant Definitions
                                        (0026) ;-----------------------------------------------
                                        (0027) 
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) 	
                                        (0033) 
                                        (0034) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0035) ;---------------------------------------------------
                                        (0036) ; Insert your custom declarations below this banner
                                        (0037) ;---------------------------------------------------
                                        (0038) 
                                        (0039) ;---------------------------------------------------
                                        (0040) ; Insert your custom declarations above this banner
                                        (0041) ;---------------------------------------------------
                                        (0042) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0043) 
                                        (0044) 
                                        (0045) ;-----------------------------------------------------------------------------
                                        (0046) ;  FUNCTION NAME: PSoC_GPIO_ISR
                                        (0047) ;
                                        (0048) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0049) ;
                                        (0050) ;-----------------------------------------------------------------------------
                                        (0051) ;
                                        (0052) PSoC_GPIO_ISR:
                                        (0053) 
                                        (0054) 
                                        (0055)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0056)    ;---------------------------------------------------
                                        (0057)    ; Insert your custom code below this banner
                                        (0058)    ;---------------------------------------------------
                                        (0059) 
                                        (0060)    ;---------------------------------------------------
                                        (0061)    ; Insert your custom code above this banner
                                        (0062)    ;---------------------------------------------------
                                        (0063)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0064) 
0C42: 7E       RETI                     (0065)    reti
                                        (0066) 
                                        (0067) 
                                        (0068) ; end of file PSoCGPIOINT.asm
