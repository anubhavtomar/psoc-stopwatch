//*****************************************************************************
//*****************************************************************************
//  FILENAME: stateTimer.h
//   Version: 2.6, Updated on 2015/3/4 at 22:27:48
//  Generated by PSoC Designer 5.4.3191
//
//  DESCRIPTION: Timer32 User Module C Language interface file
//-----------------------------------------------------------------------------
//  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
#ifndef stateTimer_INCLUDE
#define stateTimer_INCLUDE

#include <m8c.h>

#pragma fastcall16 stateTimer_EnableInt
#pragma fastcall16 stateTimer_DisableInt
#pragma fastcall16 stateTimer_Start
#pragma fastcall16 stateTimer_Stop
#pragma fastcall16 stateTimer_ReadTimer               // Read  DR0
#pragma fastcall16 stateTimer_ReadTimerSaveCV         // Read  DR0
#pragma fastcall16 stateTimer_WritePeriod             // Write DR1
#pragma fastcall16 stateTimer_ReadCompareValue        // Read  DR2
#pragma fastcall16 stateTimer_WriteCompareValue       // Write DR2

// The following symbols are deprecated.
// They may be omitted in future releases
//
#pragma fastcall16 stateTimer_ReadCounter              // Read  DR0 "Obsolete"
#pragma fastcall16 stateTimer_CaptureCounter           // Read  DR0 "Obsolete"


//-------------------------------------------------
// Prototypes of the stateTimer API.
//-------------------------------------------------

extern void stateTimer_EnableInt(void);                                    // Proxy Class 1
extern void stateTimer_DisableInt(void);                                   // Proxy Class 1
extern void stateTimer_Start(void);                                        // Proxy Class 1
extern void stateTimer_Stop(void);                                         // Proxy Class 1
extern void stateTimer_ReadTimer(DWORD * pdwCount);                        // Proxy Class 3
extern void stateTimer_ReadTimerSaveCV(DWORD * pdwCount);                  // Proxy Class 3
extern void stateTimer_WritePeriod(DWORD dwPeriod);                        // Proxy Class 2
extern void stateTimer_ReadCompareValue(DWORD * pdwCompareValue);          // Proxy Class 3
extern void stateTimer_WriteCompareValue(DWORD dwCompareValue);            // Proxy Class 2

// The following functions are deprecated.
// They may be omitted in future releases
//
extern void stateTimer_ReadCounter(DWORD * pdwCount);          // Obsolete
extern void stateTimer_CaptureCounter(DWORD * pdwCount);       // Obsolete


//--------------------------------------------------
// Constants for stateTimer API's.
//--------------------------------------------------

#define stateTimer_CONTROL_REG_START_BIT       ( 0x01 )
#define stateTimer_INT_REG_ADDR                ( 0x0e1 )
#define stateTimer_INT_MASK                    ( 0x80 )


//--------------------------------------------------
// Constants for stateTimer user defined values
//--------------------------------------------------

#define stateTimer_PERIOD                      ( 0xc34f )
#define stateTimer_COMPARE_VALUE               ( 0x0 )


//-------------------------------------------------
// Register Addresses for stateTimer
//-------------------------------------------------

#pragma ioport  stateTimer_COUNTER_LSB_REG: 0x030          //Count register LSB
BYTE            stateTimer_COUNTER_LSB_REG;
#pragma ioport  stateTimer_COUNTER_ISB1_REG:    0x034      //Count register ISB1
BYTE            stateTimer_COUNTER_ISB1_REG;
#pragma ioport  stateTimer_COUNTER_ISB2_REG:    0x038      //Count register ISB2
BYTE            stateTimer_COUNTER_ISB2_REG;
#pragma ioport  stateTimer_COUNTER_MSB_REG: 0x03c          //Count register MSB
BYTE            stateTimer_COUNTER_MSB_REG;
#pragma ioport  stateTimer_PERIOD_LSB_REG:  0x031          //Period register LSB
BYTE            stateTimer_PERIOD_LSB_REG;
#pragma ioport  stateTimer_PERIOD_ISB1_REG: 0x035          //Period register ISB1
BYTE            stateTimer_PERIOD_ISB1_REG;
#pragma ioport  stateTimer_PERIOD_ISB2_REG: 0x039          //Period register ISB2
BYTE            stateTimer_PERIOD_ISB2_REG;
#pragma ioport  stateTimer_PERIOD_MSB_REG:  0x03d          //Period register MSB
BYTE            stateTimer_PERIOD_MSB_REG;
#pragma ioport  stateTimer_COMPARE_LSB_REG: 0x032          //Compare register LSB
BYTE            stateTimer_COMPARE_LSB_REG;
#pragma ioport  stateTimer_COMPARE_ISB1_REG:    0x036      //Compare register ISB1
BYTE            stateTimer_COMPARE_ISB1_REG;
#pragma ioport  stateTimer_COMPARE_ISB2_REG:    0x03a      //Compare register ISB2
BYTE            stateTimer_COMPARE_ISB2_REG;
#pragma ioport  stateTimer_COMPARE_MSB_REG: 0x03e          //Compare register MSB
BYTE            stateTimer_COMPARE_MSB_REG;
#pragma ioport  stateTimer_CONTROL_LSB_REG: 0x033          //Control register LSB
BYTE            stateTimer_CONTROL_LSB_REG;
#pragma ioport  stateTimer_CONTROL_ISB1_REG:    0x037      //Control register ISB1
BYTE            stateTimer_CONTROL_ISB1_REG;
#pragma ioport  stateTimer_CONTROL_ISB2_REG:    0x03b      //Control register ISB2
BYTE            stateTimer_CONTROL_ISB2_REG;
#pragma ioport  stateTimer_CONTROL_MSB_REG: 0x03f          //Control register MSB
BYTE            stateTimer_CONTROL_MSB_REG;
#pragma ioport  stateTimer_FUNC_LSB_REG:    0x130          //Function register LSB
BYTE            stateTimer_FUNC_LSB_REG;
#pragma ioport  stateTimer_FUNC_ISB1_REG:   0x134          //Function register ISB1
BYTE            stateTimer_FUNC_ISB1_REG;
#pragma ioport  stateTimer_FUNC_ISB2_REG:   0x138          //Function register ISB2
BYTE            stateTimer_FUNC_ISB2_REG;
#pragma ioport  stateTimer_FUNC_MSB_REG:    0x13c          //Function register MSB
BYTE            stateTimer_FUNC_MSB_REG;
#pragma ioport  stateTimer_INPUT_LSB_REG:   0x131          //Input register LSB
BYTE            stateTimer_INPUT_LSB_REG;
#pragma ioport  stateTimer_INPUT_ISB1_REG:  0x135          //Input register ISB1
BYTE            stateTimer_INPUT_ISB1_REG;
#pragma ioport  stateTimer_INPUT_ISB2_REG:  0x139          //Input register ISB2
BYTE            stateTimer_INPUT_ISB2_REG;
#pragma ioport  stateTimer_INPUT_MSB_REG:   0x13d          //Input register MSB
BYTE            stateTimer_INPUT_MSB_REG;
#pragma ioport  stateTimer_OUTPUT_LSB_REG:  0x132          //Output register LSB
BYTE            stateTimer_OUTPUT_LSB_REG;
#pragma ioport  stateTimer_OUTPUT_ISB1_REG: 0x136          //Output register ISB1
BYTE            stateTimer_OUTPUT_ISB1_REG;
#pragma ioport  stateTimer_OUTPUT_ISB2_REG: 0x13a          //Output register ISB2
BYTE            stateTimer_OUTPUT_ISB2_REG;
#pragma ioport  stateTimer_OUTPUT_MSB_REG:  0x13e          //Output register MSB
BYTE            stateTimer_OUTPUT_MSB_REG;
#pragma ioport  stateTimer_INT_REG:       0x0e1            //Interrupt Mask Register
BYTE            stateTimer_INT_REG;


//-------------------------------------------------
// stateTimer Macro 'Functions'
//-------------------------------------------------

#define stateTimer_Start_M \
   ( stateTimer_CONTROL_LSB_REG |=  stateTimer_CONTROL_REG_START_BIT )

#define stateTimer_Stop_M  \
   ( stateTimer_CONTROL_LSB_REG &= ~stateTimer_CONTROL_REG_START_BIT )

#define stateTimer_EnableInt_M   \
   M8C_EnableIntMask(  stateTimer_INT_REG, stateTimer_INT_MASK )

#define stateTimer_DisableInt_M  \
   M8C_DisableIntMask( stateTimer_INT_REG, stateTimer_INT_MASK )

#endif
// end of file stateTimer.h
