//*****************************************************************************
//*****************************************************************************
//  FILENAME: SW.h
//   Version: 2.6, Updated on 2015/3/4 at 22:27:48
//  Generated by PSoC Designer 5.4.3191
//
//  DESCRIPTION: Timer32 User Module C Language interface file
//-----------------------------------------------------------------------------
//  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
#ifndef SW_INCLUDE
#define SW_INCLUDE

#include <m8c.h>

#pragma fastcall16 SW_EnableInt
#pragma fastcall16 SW_DisableInt
#pragma fastcall16 SW_Start
#pragma fastcall16 SW_Stop
#pragma fastcall16 SW_ReadTimer               // Read  DR0
#pragma fastcall16 SW_ReadTimerSaveCV         // Read  DR0
#pragma fastcall16 SW_WritePeriod             // Write DR1
#pragma fastcall16 SW_ReadCompareValue        // Read  DR2
#pragma fastcall16 SW_WriteCompareValue       // Write DR2

// The following symbols are deprecated.
// They may be omitted in future releases
//
#pragma fastcall16 SW_ReadCounter              // Read  DR0 "Obsolete"
#pragma fastcall16 SW_CaptureCounter           // Read  DR0 "Obsolete"


//-------------------------------------------------
// Prototypes of the SW API.
//-------------------------------------------------

extern void SW_EnableInt(void);                                    // Proxy Class 1
extern void SW_DisableInt(void);                                   // Proxy Class 1
extern void SW_Start(void);                                        // Proxy Class 1
extern void SW_Stop(void);                                         // Proxy Class 1
extern void SW_ReadTimer(DWORD * pdwCount);                        // Proxy Class 3
extern void SW_ReadTimerSaveCV(DWORD * pdwCount);                  // Proxy Class 3
extern void SW_WritePeriod(DWORD dwPeriod);                        // Proxy Class 2
extern void SW_ReadCompareValue(DWORD * pdwCompareValue);          // Proxy Class 3
extern void SW_WriteCompareValue(DWORD dwCompareValue);            // Proxy Class 2

// The following functions are deprecated.
// They may be omitted in future releases
//
extern void SW_ReadCounter(DWORD * pdwCount);          // Obsolete
extern void SW_CaptureCounter(DWORD * pdwCount);       // Obsolete


//--------------------------------------------------
// Constants for SW API's.
//--------------------------------------------------

#define SW_CONTROL_REG_START_BIT               ( 0x01 )
#define SW_INT_REG_ADDR                        ( 0x0e1 )
#define SW_INT_MASK                            ( 0x08 )


//--------------------------------------------------
// Constants for SW user defined values
//--------------------------------------------------

#define SW_PERIOD                              ( 0x1869f )
#define SW_COMPARE_VALUE                       ( 0x0 )


//-------------------------------------------------
// Register Addresses for SW
//-------------------------------------------------

#pragma ioport  SW_COUNTER_LSB_REG: 0x020                  //Count register LSB
BYTE            SW_COUNTER_LSB_REG;
#pragma ioport  SW_COUNTER_ISB1_REG:    0x024              //Count register ISB1
BYTE            SW_COUNTER_ISB1_REG;
#pragma ioport  SW_COUNTER_ISB2_REG:    0x028              //Count register ISB2
BYTE            SW_COUNTER_ISB2_REG;
#pragma ioport  SW_COUNTER_MSB_REG: 0x02c                  //Count register MSB
BYTE            SW_COUNTER_MSB_REG;
#pragma ioport  SW_PERIOD_LSB_REG:  0x021                  //Period register LSB
BYTE            SW_PERIOD_LSB_REG;
#pragma ioport  SW_PERIOD_ISB1_REG: 0x025                  //Period register ISB1
BYTE            SW_PERIOD_ISB1_REG;
#pragma ioport  SW_PERIOD_ISB2_REG: 0x029                  //Period register ISB2
BYTE            SW_PERIOD_ISB2_REG;
#pragma ioport  SW_PERIOD_MSB_REG:  0x02d                  //Period register MSB
BYTE            SW_PERIOD_MSB_REG;
#pragma ioport  SW_COMPARE_LSB_REG: 0x022                  //Compare register LSB
BYTE            SW_COMPARE_LSB_REG;
#pragma ioport  SW_COMPARE_ISB1_REG:    0x026              //Compare register ISB1
BYTE            SW_COMPARE_ISB1_REG;
#pragma ioport  SW_COMPARE_ISB2_REG:    0x02a              //Compare register ISB2
BYTE            SW_COMPARE_ISB2_REG;
#pragma ioport  SW_COMPARE_MSB_REG: 0x02e                  //Compare register MSB
BYTE            SW_COMPARE_MSB_REG;
#pragma ioport  SW_CONTROL_LSB_REG: 0x023                  //Control register LSB
BYTE            SW_CONTROL_LSB_REG;
#pragma ioport  SW_CONTROL_ISB1_REG:    0x027              //Control register ISB1
BYTE            SW_CONTROL_ISB1_REG;
#pragma ioport  SW_CONTROL_ISB2_REG:    0x02b              //Control register ISB2
BYTE            SW_CONTROL_ISB2_REG;
#pragma ioport  SW_CONTROL_MSB_REG: 0x02f                  //Control register MSB
BYTE            SW_CONTROL_MSB_REG;
#pragma ioport  SW_FUNC_LSB_REG:    0x120                  //Function register LSB
BYTE            SW_FUNC_LSB_REG;
#pragma ioport  SW_FUNC_ISB1_REG:   0x124                  //Function register ISB1
BYTE            SW_FUNC_ISB1_REG;
#pragma ioport  SW_FUNC_ISB2_REG:   0x128                  //Function register ISB2
BYTE            SW_FUNC_ISB2_REG;
#pragma ioport  SW_FUNC_MSB_REG:    0x12c                  //Function register MSB
BYTE            SW_FUNC_MSB_REG;
#pragma ioport  SW_INPUT_LSB_REG:   0x121                  //Input register LSB
BYTE            SW_INPUT_LSB_REG;
#pragma ioport  SW_INPUT_ISB1_REG:  0x125                  //Input register ISB1
BYTE            SW_INPUT_ISB1_REG;
#pragma ioport  SW_INPUT_ISB2_REG:  0x129                  //Input register ISB2
BYTE            SW_INPUT_ISB2_REG;
#pragma ioport  SW_INPUT_MSB_REG:   0x12d                  //Input register MSB
BYTE            SW_INPUT_MSB_REG;
#pragma ioport  SW_OUTPUT_LSB_REG:  0x122                  //Output register LSB
BYTE            SW_OUTPUT_LSB_REG;
#pragma ioport  SW_OUTPUT_ISB1_REG: 0x126                  //Output register ISB1
BYTE            SW_OUTPUT_ISB1_REG;
#pragma ioport  SW_OUTPUT_ISB2_REG: 0x12a                  //Output register ISB2
BYTE            SW_OUTPUT_ISB2_REG;
#pragma ioport  SW_OUTPUT_MSB_REG:  0x12e                  //Output register MSB
BYTE            SW_OUTPUT_MSB_REG;
#pragma ioport  SW_INT_REG:       0x0e1                    //Interrupt Mask Register
BYTE            SW_INT_REG;


//-------------------------------------------------
// SW Macro 'Functions'
//-------------------------------------------------

#define SW_Start_M \
   ( SW_CONTROL_LSB_REG |=  SW_CONTROL_REG_START_BIT )

#define SW_Stop_M  \
   ( SW_CONTROL_LSB_REG &= ~SW_CONTROL_REG_START_BIT )

#define SW_EnableInt_M   \
   M8C_EnableIntMask(  SW_INT_REG, SW_INT_MASK )

#define SW_DisableInt_M  \
   M8C_DisableIntMask( SW_INT_REG, SW_INT_MASK )

#endif
// end of file SW.h
